#   Generate minimal Python language bindings that use CFFI.
#
#   These are not meant to be idiomatic, but to provide a minimal platform
#   of FFI function bindings on which to base idiomatic Python classes.
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("python_cffi", "Python CFFI binding")

#   Target provides name space isolation for its functions
function target_python_cffi

function register_type (struct, pointer)
    if count(project->python_types.type, type.name = my.struct) = 0
        new project->python_types.type
            type.name = my.struct
            type.pointer = my.pointer
        endnew
    endif
endfunction

function resolve_container (container)
    if my.container.variadic
    elsif my.container.type = "nothing"
    elsif my.container.type = "anything" | my.container.type = "sockish"
    elsif my.container.type = "boolean"
    elsif my.container.type = "byte"
    elsif my.container.type = "integer" | my.container.type = "file_size" | my.container.type = "time"
    elsif my.container.type = "number"
    elsif my.container.type = "size"
    elsif my.container.type = "real"
    elsif my.container.type = "buffer"
    elsif my.container.type = "FILE"
    elsif my.container.type = "string" | my.container.type = "format"
    elsif my.container.callback
    else
        register_type ("$(my.container.type:c,no)_t", "$(my.container.type:c,no)_p")
    endif
endfunction

function resolve_method (method)
    my.method.python_name = "$(my.method.name:c)"
    if regexp.match ("^(is|from)$", my.method.python_name) # matches keyword
        my.method.python_name += "_"
    endif
    for my.method.argument where !argument.variadic
        resolve_container (argument)
    endfor
    for my.method.return as ret
        resolve_container (ret)
    endfor
endfunction

function resolve_class (class)
    register_type("$(class.c_name)_t", "$(class.c_name)_p")
    for my.class.callback_type as method
        resolve_method (method)
    endfor
    for my.class.constructor as method
        resolve_method (method)
    endfor
    for my.class.destructor as method
        resolve_method (method)
    endfor
    for my.class.method
        resolve_method (method)
    endfor
endfunction

function generate_binding
    directory.create ("bindings/python_cffi/$(project.name:c)_cffi")
    output "bindings/python_cffi/$(project.name:c)_cffi/__init__.py"
    >$(project.GENERATED_WARNING_HEADER:)
    >try:
    >    import native
    >    lib = native.lib
    >    ffi = native.ffi
    >except ImportError:
    >    import dlopen
    >    lib = dlopen.lib
    >    ffi = dlopen.ffi
    >

    output "bindings/python_cffi/$(project.name:c)_cffi/dlopen.py"
    >$(project.GENERATED_WARNING_HEADER:)
    >from __future__ import print_function
    >import os
    >import sys
    >
    >import cffi
    >ffi = cffi.FFI()
    >
    >try:
    >    # If LD_LIBRARY_PATH or your OSs equivalent is set, this is the only way to
    >    # load the library.  If we use find_library below, we get the wrong result.
    >    if os.name == 'posix':
    >        if sys.platform == 'darwin':
    >            libpath = '$(project.libname).$(project->version.major).dylib'
    >        else:
    >            libpath = '$(project.libname).so.$(project->version.major)'
    >    elif os.name == 'nt':
    >        libpath = '$(project.libname).dll'
    >    lib = ffi.dlopen(libpath)
    >except OSError:
    >    libpath = find_library("$(project.name)")
    >    if not libpath:
    >        raise ImportError("Unable to find $(project.libname)")
    >    lib = ffi.dlopen(libpath)
    >
    >from $(project.name:c)_cffi.cdefs import $(project.name:c)_cdefs
    >
    >for cdef in $(project.name:c)_cdefs:
    >   ffi.cdef (cdef)

    output "bindings/python_cffi/$(project.name:c)_cffi/build.py"
    >$(project.GENERATED_WARNING_HEADER:)
    >
    >from __future__ import print_function
    >import os
    >import re
    >import sys
    >
    >import subprocess
    >def pkgconfig_installed ():
    >   try:
    >        subprocess.check_output (["pkg-config", "--version"])
    >        return True
    >   except subprocess.CalledProcessError:
    >        return False
    >
    >def pkgconfig_kwargs (libs):
    >    """If pkg-config is available, then return kwargs for set_source based on pkg-config output
    >    
    >    It setup include_dirs, library_dirs, libraries and define_macros
    >    """
    >
    >    # make API great again!
    >    if isinstance (libs, (str, bytes)):
    >        libs = (libs, )
    >    
    >    # drop starting -I -L -l from cflags
    >    def dropILl (string):
    >        def _dropILl (string):
    >            if string.startswith ("-I") or string.startswith ("-L") or string.startswith ("-l"):
    >                return string [2:]
    >        return [_dropILl (x) for x in string.split ()]
    >
    >    # convert -Dfoo=bar to list of tuples [("foo", "bar")] expected by cffi
    >    def macros (string):
    >        def _macros (string):
    >            return tuple (string [2:].split ('=', 2))
    >        return [_macros (x) for x in string.split () if x.startswith ("-D")]
    >
    >    # pkg-config call
    >    def pc (libname, *args):
    >        a = ["pkg-config", "--print-errors"]
    >        a.extend (args)
    >        a.append (libname)
    >        return subprocess.check_output (a)
    >
    >    # return kwargs for given libname
    >    def kwargs (libname):
    >        return {
    >                "include_dirs" : dropILl (pc (libname, "--cflags-only-I")),
    >                "library_dirs" : dropILl (pc (libname, "--libs-only-L")),
    >                "libraries" : dropILl (pc (libname, "--libs-only-l")),
    >                "define_macros" : macros (pc (libname, "--cflags")),
    >                }
    >
    >    # merge all arguments together
    >    ret = {}
    >    for libname in libs:
    >        foo = kwargs (libname)
    >        for key, value in foo.items ():
    >            if not key in ret:
    >                ret [key] = value
    >            else:
    >                ret [key].extend (value)
    >
    >    return ret
    >
    >if not pkgconfig_installed ():
    >    print ("ERROR: build without pkg-config not supported", file=sys.stderr)
    >    sys.exit (1)
    >
    >kwargs = pkgconfig_kwargs ([
    for project.use
    >    "$(use.project)",
    endfor
    >    "$(project.libname)"
    >])
    >import cffi
    ># can't import does not work, read and exec manually
    >with open (os.path.join (
    >    os.path.dirname (__file__),
    >    "cdefs.py"), 'r') as fp:
    >    cdefs_py = fp.read()
    >gl = {}
    >exec cdefs_py in gl
    >$(project.name:c)_cdefs = gl ["$(project.name:c)_cdefs"]
    >
    >ffibuilder = cffi.FFI ()
    >ffibuilder.set_source ("$(project.name:c)_cffi.native", "#include <$(project.header)>", **kwargs)
    >
    ># Custom setup for $(project.name)
    >for item in $(project.name:c)_cdefs:
    >    ffibuilder.cdef(item)
    >
    >if __name__ == "__main__":
    >    ffibuilder.compile (verbose=True)

    output "bindings/python_cffi/$(project.name:c)_cffi/cdefs.py"
    >import re
    >$(project.name:c)_cdefs = list ()
    ># Custom setup for $(project.name)
    >$(file.slurp('src/python_cffi.inc')?'')
    >
    >
    >$(project.name:c)_cdefs.append ('''
    for project->python_types.type as t
        >typedef struct _$(t.name:c) $(t.name:c);
    endfor
    for class where defined (class.api) & class.private = "0"
        for class.callback_type
            >// $(callback_type.description:no,block)
            >$(c_callback_typedef (callback_type):)
            >
        endfor
    endfor
    for class where defined (class.api) & class.private = "0"
        >// CLASS: $(class.name)
        for class. as f
            if class(f) = "XML item" & (name(f) = 'constructor' | name(f) = 'destructor')
                >// $(f.description:no,block)
                >$(c_method_signature (f):);
                >
            endif
        endfor
        for class.actor
            >// $(actor.description:no,block)
            >$(PROJECT.PREFIX)_EXPORT void
            >   $(actor.name:c) (zsock_t *pipe, void *args);
            >
        endfor
        for class.method
            >// $(method.description:no,block)
            >$(c_method_signature (method):);
            >
        endfor
    endfor
    >''')
    >for i, item in enumerate ($(project.name:c)_cdefs):
    >    $(project.name:c)_cdefs [i] = re.sub(r';[^;]*\\bva_list\\b[^;]*;', ';', item, flags=re.S) # we don't support anything with a va_list arg
    >

    output "bindings/python_cffi/README.md"
    >#$(project.name) cffi bindings
    >
    >This package contains low level python bindings for $(project.name) based on cffi library.
    >Module is compatible with 
    > * The “in-line”, “ABI mode”, which simply **dlopen** main library and parse C declaration on runtime
    > * The “out-of-line”, “API mode”, which build C **native** Python extension
    >
    >#Building
    >Run
    >    export PKG_CONFIG_PATH=/path/to/your/project/pkgconfig
    >    python $(project.name:c)_cffi/build.py
    >In order to use the bindings, code will fallback to dlopen part, so no need for C
    >compiler or devel environment installed.
    >
    >#TODO:
    > * proper setuptools installation
endfunction

    if count (class, defined (class.api) & class.private = "0")
        # Container for UDTs used by this module
        new python_types
        endnew
        for class where defined (class.api) & class.private = "0"
            resolve_class (class)
        endfor
        generate_binding ()
    endif

    output "bindings/python_cffi/setup.py"
    >from setuptools import setup
    >
    >setup(
    >    name = "$(project.name:c)_cffi",
    >    setup_requires=["cffi>=1.0.0"],
    >    cffi_modules=["$(project.name:c)_cffi/build.py:ffibuilder"],
    >    install_requires=["cffi>=1.0.0"],
    >)


endfunction
