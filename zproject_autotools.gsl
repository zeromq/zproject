#   Generate autoconf files for project
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("autotools", "GNU build system")

.macro generate_autoconf_files
.output "autogen.sh"
#!/usr/bin/env sh
$(project.GENERATED_WARNING_HEADER:)

#   Script to generate all required files from fresh git checkout.

# Debian and Ubuntu do not shipt libtool anymore, but OSX does not ship libtoolize.
command -v libtoolize >/dev/null 2>&1
if  [ $? -ne 0 ]; then
    command -v libtool >/dev/null 2>&1
    if  [ $? -ne 0 ]; then
        echo "autogen.sh: error: could not find libtool.  libtool is required to run autogen.sh." 1>&2
        exit 1
    fi
fi

command -v autoreconf >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "autogen.sh: error: could not find autoreconf.  autoconf and automake are required to run autogen.sh." 1>&2
    exit 1
fi

command -v pkg-config >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "autogen.sh: error: could not find pkg-config.  pkg-config is required to run autogen.sh." 1>&2
    exit 1
fi

mkdir -p ./config
if [ $? -ne 0 ]; then
    echo "autogen.sh: error: could not create directory: ./config." 1>&2
    exit 1
fi

autoreconf --install --force --verbose -I config
status=$?
if [ $status -ne 0 ]; then
    echo "autogen.sh: error: autoreconf exited with status $status" 1>&2
    exit 1
fi

$(project.GENERATED_WARNING_HEADER:)
.chmod_x ("autogen.sh")
.output "configure.ac"
$(project.GENERATED_WARNING_HEADER:)

#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.61)
#
AC_INIT([$(project.name)],[$(->version.major).$(->version.minor).$(->version.patch)],[$(project.email)])

AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR(config)
AC_CONFIG_HEADERS([src/platform.h])
AM_INIT_AUTOMAKE([subdir-objects tar-ustar dist-zip foreign])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

# This defines PACKAGE_VERSION_... in src/platform.h
PV_MAJOR=`echo $PACKAGE_VERSION | cut -d . -f 1`
PV_MINOR=`echo $PACKAGE_VERSION | cut -d . -f 2`
PV_PATCH=`echo $PACKAGE_VERSION | cut -d . -f 3`
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MAJOR],[$PV_MAJOR],
    [$(PROJECT.PREFIX) major version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_MINOR],[$PV_MINOR],
    [$(PROJECT.PREFIX) minor version])
AC_DEFINE_UNQUOTED([PACKAGE_VERSION_PATCH],[$PV_PATCH],
    [$(PROJECT.PREFIX) patchlevel])
# This lets us use PACKAGE_VERSION in Makefiles
AC_SUBST(PACKAGE_VERSION)

#
# Libtool -version-info (ABI version)
#
# Currently 2.0.1 ("stable"). Don't change this unless you
# know exactly what you're doing and have read and understand
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
#
# $(project.libname) -version-info
LTVER="$(project->version.major):$(project->version.minor):0"
AC_SUBST(LTVER)

# Capture c flags
$(PROJECT.PREFIX)_ORIG_CFLAGS="${CFLAGS:-none}"

# Checks for programs
AC_PROG_CC
AC_PROG_CC_C99
AM_PROG_CC_C_O
.if project.use_cxx
AC_PROG_CXX
AC_PROG_CXX_C_O
.endif
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_PROG_SED
AC_PROG_AWK
PKG_PROG_PKG_CONFIG

.if file.exists ("acinclude.m4")
AX_PROJECT_LOCAL_HOOK # Optional project-local hook (acinclude.m4)

.endif
# Code coverage
AC_ARG_WITH(gcov, [AS_HELP_STRING([--with-gcov=yes/no],
                  [With GCC Code Coverage reporting])],
                  [$(PROJECT.PREFIX)_GCOV="$withval"])

if test "x${$(PROJECT.PREFIX)_GCOV}" == "xyes"; then
    CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"

    if test "x${$(PROJECT.PREFIX)_ORIG_CFLAGS}" != "xnone"; then
        CFLAGS="${CFLAGS} ${$(PROJECT.PREFIX)_ORIG_CFLAGS}"
    fi
    AM_CONDITIONAL(WITH_GCOV, true)
else
    AM_CONDITIONAL(WITH_GCOV, false)
fi

.# Archive user supplied flags
PREVIOUS_CFLAGS="${CFLAGS}"
PREVIOUS_LIBS="${LIBS}"

.for use
. if use.libname ?<> ""

was_$(use.project:c)_check_lib_detected=no

PKG_CHECK_MODULES([$(use.project:c)], [$(use.libname) >= $(use.min_version)],
    [
.  if optional
        AC_DEFINE(HAVE_$(USE.LIBNAME), 1, [The $(use.libname) library is to be used])
.  endif
    ],
    [
.  if use.min_version = '0.0.0'
        AC_ARG_WITH([$(use.libname)],
            [
                AS_HELP_STRING([--with-$(use.libname)],
                [Specify $(use.libname) prefix])
            ],
            [search_$(use.libname)="yes"],
            [])

        $(use.project:c)_synthetic_cflags=""
        $(use.project:c)_synthetic_libs="-l$(use.linkname)"

        if test "x$search_$(use.libname)" = "xyes"; then
            if test -r "${with_$(use.libname)}/include/$(use.header)"; then
                $(use.project:c)_synthetic_cflags="-I${with_$(use.libname)}/include"
                $(use.project:c)_synthetic_libs="-L${with_$(use.libname)}/lib -l$(use.linkname)"
            else
                AC_MSG_ERROR([${with_$(use.libname)}/include/$(use.header) not found. Please check $(use.libname) prefix])
            fi
        fi
.       if !defined(use.test)
.           abort "test is not set on project " + use.project + " please ensure it is set"
.       endif


        AC_CHECK_LIB([$(use.prefix)], [$(use.test:)],
            [
                CFLAGS="${$(use.project:c)_synthetic_cflags} ${CFLAGS}"
                LDFLAGS="${$(use.project:c)_synthetic_libs} ${LDFLAGS}"
                LIBS="${$(use.project:c)_synthetic_libs} ${LIBS}"

                AC_SUBST([$(use.project:c)_CFLAGS],[${$(use.project:c)_synthetic_cflags}])
                AC_SUBST([$(use.project:c)_LIBS],[${$(use.project:c)_synthetic_libs}])
                was_$(use.project:c)_check_lib_detected=yes
.       if optional
                AC_DEFINE(HAVE_$(USE.LIBNAME), 1, [The $(use.libname) library is to be used])
            ],
            [])
.       else
            ],
            [AC_MSG_ERROR([cannot link with -l$(use.linkname), install $(use.libname)])])
.       endif
.   elsif optional
        AC_MSG_WARN([Cannot find $(use.libname) $(use.min_version) or higher])
.   else
        AC_MSG_ERROR([Cannot find $(use.libname) $(use.min_version) or higher])
.   endif
    ])

if test "x$was_$(use.project:c)_check_lib_detected" = "xno"; then
    CFLAGS="${$(use.project:c)_CFLAGS} ${CFLAGS}"
    LIBS="${$(use.project:c)_LIBS} ${LIBS}"
fi
. else
AC_CHECK_PROG(HAVE_$(USE.PROJECT:C), $(use.project:c), yes)
if test x"$HAVE_$(USE.PROJECT:C)" != x"yes" ; then
    AC_MSG_ERROR([Cannot find $(use.project)])
fi
. endif
.endfor

.# Restore user supplied flags
CFLAGS="${PREVIOUS_CFLAGS}"
LIBS="${PREVIOUS_LIBS}"

# Platform specific checks
$(project.name:c)_on_mingw32="no"
$(project.name:c)_on_cygwin="no"
$(project.name:c)_on_android="no"
$(project.name:c)_on_linux="no"
$(project.name:c)_on_gnu="no"

# Host specific checks
AC_CANONICAL_HOST

# Man pages are built/installed if asciidoc and xmlto are present
#   --with-docs=no overrides this
AC_ARG_WITH([docs],
    AS_HELP_STRING([--with-docs],
        [Build and install man pages [default=yes]]),
    [with_docs=$withval])

if test "x$with_docs" = "xno"; then
    $(project.name:c)_build_doc="no"
    $(project.name:c)_install_man="no"
else
    # Determine whether or not documentation should be built and installed.
    $(project.name:c)_build_doc="yes"
    $(project.name:c)_install_man="yes"

    # Check for asciidoc and xmlto and don't build the docs if these are not installed.
    AC_CHECK_PROG($(project.name:c)_have_asciidoc, asciidoc, yes, no)
    AC_CHECK_PROG($(project.name:c)_have_xmlto, xmlto, yes, no)
    if test "x$$(project.name:c)_have_asciidoc" = "xno" -o "x$$(project.name:c)_have_xmlto" = "xno"; then
        $(project.name:c)_build_doc="no"
        # Tarballs built with 'make dist' ship with prebuilt documentation.
        if ! test -f doc/$(project.name:c).7; then
            $(project.name:c)_install_man="no"
            AC_MSG_WARN([You are building an unreleased version of $(PROJECT.NAME) and asciidoc or xmlto are not installed.])
            AC_MSG_WARN([Documentation will not be built and manual pages will not be installed.])
        fi
    fi
fi
AC_MSG_CHECKING([whether to build documentation])
AC_MSG_RESULT([$$(project.name:c)_build_doc])
AC_MSG_CHECKING([whether to install manpages])
AC_MSG_RESULT([$$(project.name:c)_install_man])

# Set some default features required by $(project.libname) code.
CPPFLAGS="-D$(PROJECT.PREFIX)_INTERNAL_BUILD -D_REENTRANT -D_THREAD_SAFE $CPPFLAGS"

# OS-specific tests
case "${host_os}" in
    *linux*)
        # Define on Linux to enable all library features
        CPPFLAGS="-D_GNU_SOURCE -DLINUX $CPPFLAGS"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_LINUX, 1, [Have Linux OS])
        $(project.name:c)_on_linux="yes"

        case "${host_os}" in
            *android*)
                AC_DEFINE($(PROJECT.PREFIX)_HAVE_ANDROID, 1, [Have Android OS])
                $(project.name:c)_on_android="yes"
            ;;
        esac
        ;;
    *solaris*)
        # Define on Solaris to enable all library features
        CPPFLAGS="-D_PTHREADS $CPPFLAGS"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_SOLARIS, 1, [Have Solaris OS])
        CFLAGS="${CFLAGS} -lsocket -lssp"
        ;;
    *freebsd*)
        # Define on FreeBSD to enable all library features
        CPPFLAGS="-D__BSD_VISIBLE $CPPFLAGS"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_FREEBSD, 1, [Have FreeBSD OS])
        ;;
    *darwin*)
        # Define on Darwin to enable all library features
        CPPFLAGS="-D_DARWIN_C_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_OSX, 1, [Have DarwinOSX OS])
        ;;
    *netbsd*)
        # Define on NetBSD to enable all library features
        CPPFLAGS="-D_NETBSD_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_NETBSD, 1, [Have NetBSD OS])
        ;;
    *openbsd*)
        # Define on OpenBSD to enable all library features
        CPPFLAGS="-D_BSD_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_OPENBSD, 1, [Have OpenBSD OS])
        ;;
    *nto-qnx*)
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_QNXNTO, 1, [Have QNX Neutrino OS])
        ;;
    *aix*)
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_AIX, 1, [Have AIX OS])
        ;;
    *hpux*)
        # Define on HP-UX to enable all library features
        CPPFLAGS="-D_POSIX_C_SOURCE=200112L"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_HPUX, 1, [Have HPUX OS])
        ;;
    *mingw32*)
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_WINDOWS, 1, [Have Windows OS])
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_MINGW32, 1, [Have MinGW32])
        AC_CHECK_HEADERS(windows.h)
        $(project.name:c)_on_mingw32="yes"
        $(project.name:c)_install_man="no"
        ;;
    *mingw64*)
        # Define on MINGW64 to enable all libeary features
        # Disable format error due to incomplete ANSI C
        CPPFLAGS="-Wno-error=format -D_XOPEN_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_WINDOWS, 1, [Have Windows OS])
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_MINGW32, 1, [Have MinGW32])
        AC_CHECK_HEADERS(windows.h)
        $(project.name:c)_on_mingw32="yes"
        $(project.name:c)_install_man="no"
        ;;
    *cygwin*)
        # Define on Cygwin to enable all library features
        CPPFLAGS="-D_GNU_SOURCE $CPPFLAGS"
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_CYGWIN, 1, [Have Cygwin])
        $(project.name:c)_on_cygwin="yes"
        ;;
    gnu*)
        # Define on GNU/Hurd to enable all library features
        if test "x$GXX" = "xyes"; then
            CPPFLAGS="-D_GNU_SOURCE $CPPFLAGS"
        fi
        AC_DEFINE($(PROJECT.PREFIX)_HAVE_GNU, 1, [Have GNU/Hurd OS])
        $(project.name:c)_on_gnu="yes"
        ;;
    *)
        AC_MSG_ERROR([unsupported system: ${host_os}])
        ;;
esac

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h arpa/inet.h netinet/tcp.h netinet/in.h stddef.h \\
                 stdlib.h string.h sys/socket.h sys/time.h unistd.h \\
                 limits.h ifaddrs.h)
AC_CHECK_HEADERS([net/if.h net/if_media.h linux/wireless.h], [], [],
[
#ifdef HAVE_SYS_SOCKET_H
# include <sys/socket.h>
#endif
#include <stdint.h>
])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_HEADER_TIME
AC_TYPE_UINT32_T
AC_C_VOLATILE
AC_C_BIGENDIAN

# These options are GNU compiler specific.
if test "x$GCC" = "xyes"; then
.if project.use_cxx
    CPPFLAGS="-pedantic -Werror -Wall ${CPPFLAGS}"
.else
    CPPFLAGS="-pedantic -Werror -Wall -Wc++-compat ${CPPFLAGS}"
.endif
fi

AM_CONDITIONAL(ENABLE_SHARED, test "x$enable_shared" = "xyes")
AM_CONDITIONAL(ON_MINGW, test "x$$(project.name:c)_on_mingw32" = "xyes")
AM_CONDITIONAL(ON_CYGWIN, test "x$$(project.name:c)_on_cygwin" = "xyes")
AM_CONDITIONAL(ON_ANDROID, test "x$$(project.name:c)_on_android" = "xyes")
AM_CONDITIONAL(ON_LINUX, test "x$$(project.name:c)_on_linux" = "xyes")
AM_CONDITIONAL(ON_GNU, test "x$$(project.name:c)_on_gnu" = "xyes")
AM_CONDITIONAL(INSTALL_MAN, test "x$$(project.name:c)_install_man" = "xyes")
AM_CONDITIONAL(BUILD_DOC, test "x$$(project.name:c)_build_doc" = "xyes")

.for project.main
# Check for $(name) intent
AC_ARG_ENABLE([$(name)],
    AS_HELP_STRING([--enable-$(name)],
.   if scope = "public"
        [Compile and install '$(name)' [default=yes]]),
.   else
        [Compile '$(name)' in src [default=yes]]),
.   endif
    [enable_$(name:c)=$enableval],
    [enable_$(name:c)=yes])

AM_CONDITIONAL([ENABLE_$(NAME:c)], [test x$enable_$(name:c) != xno])
AM_COND_IF([ENABLE_$(NAME:c)], [AC_MSG_NOTICE([ENABLE_$(NAME:c) defined])])

.endfor
# Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(perror gettimeofday memset getifaddrs)

# Set pkgconfigdir
AC_ARG_WITH([pkgconfigdir], AS_HELP_STRING([--with-pkgconfigdir=PATH],
    [Path to the pkgconfig directory [[LIBDIR/pkgconfig]]]),
    [pkgconfigdir="$withval"], [pkgconfigdir='${libdir}/pkgconfig'])
AC_SUBST([pkgconfigdir])

.if file.exists ("src/$(project.libname).sym")
# Symbol versioning support: snatched and adapted from libpng:
# http://www.opensource.apple.com/source/X11libs/X11libs-40/libpng/libpng-1.2.35/configure.ac
AC_MSG_CHECKING([if libraries can be versioned])
GLD="`$LD --help < /dev/null 2>/dev/null | grep version-script`"
AS_IF([test -n "$GLD"],
        [have_ld_version_script=yes
         AC_MSG_RESULT(yes)],
        [have_ld_version_script=no
         AC_MSG_RESULT(no)
         AC_MSG_WARN(*** You have not enabled versioned symbols.)
])
AM_CONDITIONAL(HAVE_LD_VERSION_SCRIPT, test "$have_ld_version_script" = "yes")
AS_IF([test "$have_ld_version_script" = "yes"],
        [AC_MSG_CHECKING([for symbol prefix])
         SYMBOL_PREFIX=`echo "PREFIX=__USER_LABEL_PREFIX__" \
                   | ${CPP-${CC-gcc} -E} - 2>&1 \
                   | ${EGREP-grep} "^PREFIX=" \
                   | ${SED-sed} "s:^PREFIX=::"`
         AC_SUBST(SYMBOL_PREFIX)
         AC_MSG_RESULT($SYMBOL_PREFIX)
         CXXFLAG_VISIBILITY=""
         gl_VISIBILITY
         AS_CASE(["$CFLAG_VISIBILITY"],
            [*-fvisibility-inlines-hidden*],[
                CXXFLAG_VISIBILITY="$CFLAG_VISIBILITY"],
            [*-fvisibility=hidden*],[
                CXXFLAG_VISIBILITY="$CFLAG_VISIBILITY -fvisibility-inlines-hidden"])
        AC_SUBST(CXXFLAG_VISIBILITY)
])
.endif

# enable specific system integration features
.for project.main where main.service ?= 1
.   systemd = 1
.endfor
.if systemd ?= 1
AC_ARG_WITH([systemd-units],
    AS_HELP_STRING([--with-systemd-units],
    [Build and install with systemd units integration [default=no]]),
    [with_systemd_units=$withval],
    [with_systemd_units=no])

PKG_PROG_PKG_CONFIG
AC_ARG_WITH([systemdsystemunitdir],
     [AS_HELP_STRING([--with-systemdsystemunitdir=DIR], [Directory for systemd service files])],,
     [with_systemdsystemunitdir=auto])
AS_IF([test "x$with_systemdsystemunitdir" = "xyes" -o "x$with_systemdsystemunitdir" = "xauto"], [
     def_systemdsystemunitdir=\$($PKG_CONFIG --variable=systemdsystemunitdir systemd)

     AS_IF([test "x$def_systemdsystemunitdir" = "x"],
   [AS_IF([test "x$with_systemdsystemunitdir" = "xyes"],
    [AC_MSG_ERROR([systemd support requested but pkg-config unable to query systemd package])])
    with_systemdsystemunitdir=no],
   [with_systemdsystemunitdir="$def_systemdsystemunitdir"])])
AS_IF([test "x$with_systemdsystemunitdir" != "xno"],
      [AC_SUBST([systemdsystemunitdir], [$with_systemdsystemunitdir])])

AM_CONDITIONAL([WITH_SYSTEMD_UNITS], [test "x$with_systemdsystemunitdir" != "xno" -a x$with_systemd_units != xno])

AM_COND_IF([WITH_SYSTEMD_UNITS],
    [AC_DEFINE(WITH_SYSTEMD_UNITS, 1, [systemd units are going to be installed])
    AC_SUBST(WITH_SYSTEMD_UNITS)],
    [])

.endif
.if project.stable
if test "x$cross_compiling" = "xyes"; then
    #   Enable draft by default when cross-compiling
    defaultval=yes
else
    # enable draft API by default if we're in a git repository
    # else disable it by default; then allow --enable-drafts=yes/no override
    AC_CHECK_FILE($srcdir/.git, [defaultval=yes], [defaultval=no])
fi

AC_ARG_ENABLE([drafts],
    AS_HELP_STRING([--enable-drafts],
        [Build and install draft classes and methods [default=yes]]),
    [enable_drafts=$enableval],
    [enable_drafts=$defaultval])

.else
#   Project has no stable classes so enable draft API by default
enable_drafts=yes
.endif
AM_CONDITIONAL([ENABLE_DRAFTS], [test x$enable_drafts != xno])

if test "x$enable_drafts" = "xyes"; then
    AC_MSG_NOTICE([Building stable and legacy API + draft API])
    AC_DEFINE($(PROJECT.PREFIX)_BUILD_DRAFT_API, 1, [Provide draft classes and methods])
    AC_SUBST(pkg_config_defines, "-D$(PROJECT.PREFIX)_BUILD_DRAFT_API=1")
else
    AC_MSG_NOTICE([Building stable and legacy API (no draft API)])
    AC_SUBST(pkg_config_defines, "")
fi

# Specify output files
.if count (class) + count (ac_config)  > 0
AC_CONFIG_FILES([Makefile
.   if count (class) > 0
                 doc/Makefile
                 src/$(project.libname).pc
.   endif
.   for project.main where defined (main->extra)
.       for extra where extra.cond ?<> "with_systemd_units"
                 src/$(extra.name)
.       endfor
.   endfor
.   for project.main where main.service ?= 1
                 src/$(main.name).cfg
.   endfor
                 ])
.else
AC_CONFIG_FILES([Makefile
.   for project.main where main.service ?= 1
                 src/$(main.name).cfg
.   endfor
                ])
.endif

.if systemd ?= 1
AM_COND_IF([WITH_SYSTEMD_UNITS],
    [AC_CONFIG_FILES([
.   for project.main where main.service ?= 1
                 src/$(main.name).service
.   endfor
    ])],
    [])

.endif

AC_OUTPUT

# Print configure summary and list make options
AC_DEFUN([AX_SUMMARIZE_ENV],
[
BUILD_USER=${USER}
BUILD_ARCH=${host}
BUILD_HOST=${ac_hostname}
BUILD_DATE=$\(date +'%F %H:%M'\)

AC_DEFINE_UNQUOTED([BUILD_USER],     "${BUILD_USER}",     [The fine user who built the package])
AC_DEFINE_UNQUOTED([BUILD_ARCH],     "${BUILD_ARCH}",     [Architecture of the build host])
AC_DEFINE_UNQUOTED([BUILD_HOST],     "${BUILD_HOST}",     [Build host name])
AC_DEFINE_UNQUOTED([BUILD_DATE],     "${BUILD_DATE}",     [Build date])

AC_SUBST(BUILD_USER)
AC_SUBST(BUILD_ARCH)
AC_SUBST(BUILD_HOST)
AC_SUBST(BUILD_DATE)
AC_SUBST(BUILD_VERSION)
])

AC_DEFUN([AX_SUMMARIZE_CONFIG],
[
echo
echo '##########################################################################'
echo '#                                SUMMARY                                 #'
echo '##########################################################################'
echo
echo Package version............... : $PACKAGE-$VERSION
echo
echo C compiler.................... : $CC
echo C compiler flags.............. : $CFLAGS
echo Configure date................ : $BUILD_DATE
echo Build architecture............ : $BUILD_ARCH
echo Build docs.................... : $$(project.name:c)_build_doc
echo Build host.................... : $BUILD_HOST
echo Build user.................... : $USER
echo Draft API..................... : $enable_drafts
echo Install dir................... : $prefix
echo Install man pages............. : $$(project.name:c)_install_man

echo
echo Help:
echo Use the Draft API \\(default = yes\\):
echo --enable-drafts=\\(yes\\|no\\)
echo
echo Build the docs and install the man pages \\(default = yes\\):
echo --with-docs=\\(yes\\|no\\)    *requires asciidoc and xmlto

echo
echo '##########################################################################'

echo
echo Configure complete! Now procced with:
echo "    - 'make'               compile the project"
echo "    - 'make check'         run the project's selftest"
echo "    - 'make install'       install the project to $prefix"
echo
echo Further options are:
echo "    - 'make callcheck'     run the project's selftest with valgrind to"
echo "                           check for performance leaks"
echo "    - 'make check-verbose' run the project's selftest in verbose mode"
echo "    - 'make code'          generate code from models in src directory"
echo "                           (requires zproject and zproto)"
echo "    - 'make debug'         run the project's selftest under gdb"
echo "    - 'make memcheck'      run the project's selftest with valgrind to"
echo "                           check for memory leaks"
echo
])

AX_SUMMARIZE_ENV
AX_SUMMARIZE_CONFIG
$(project.GENERATED_WARNING_HEADER:)
.endmacro


.macro generate_automake_files
.output "Makefile.am"
$(project.GENERATED_WARNING_HEADER:)
.if systemd ?= 1

DISTCHECK_CONFIGURE_FLAGS = \\
  --with-systemdsystemunitdir=$$dc_install_base/\$(systemdsystemunitdir)
.endif

ACLOCAL_AMFLAGS = -I config

AM_CFLAGS = \\
    -Werror=format-security

.if project.use_cxx
AM_CXXFLAGS = \\
    -Werror=format-security \\
    -std=c++11
.endif

AM_CPPFLAGS = \\
.for use where use.libname ?<> ""
    \${$(use.project:c)_CFLAGS} \\
.endfor
.if project.use_cxx
    -D__STDC_FORMAT_MACROS \\
.endif
    -I\$(srcdir)/include

.libs = ""
.for use where use.libname ?<> ""
.   libs += " \${$(use.project:c)_LIBS}"
.endfor
project_libs =$(libs:)

SUBDIRS = $(count (class)?? "doc"? "")
DIST_SUBDIRS = $(count (class)?? "doc"? "")
lib_LTLIBRARIES =
bin_PROGRAMS =
noinst_PROGRAMS =
check_PROGRAMS =
noinst_LTLIBRARIES =
TESTS =

EXTRA_DIST = \\
    CMakeLists.txt \\
.for use
    Find$(use.project:c).cmake \\
.endfor
.for extra
    src/$(extra.name) \\
.endfor
.for class where scope = "private"
    src/$(name:c).h \\
.endfor
.if file.exists ("LICENSE")
    LICENSE \\
.endif
.if file.exists ("README.txt")
    README.txt \\
.endif
.if file.exists ("README.md")
    README.md \\
.endif
.if file.exists ("CONTRIBUTING.md")
    CONTRIBUTING.md \\
.endif
    src/$(project.prefix)_classes.h

include \$(srcdir)/src/Makemodule.am
.if file.exists ("src/Makemodule-local.am")
include \$(srcdir)/src/Makemodule-local.am # Optional project-local hook
.endif

$(project.GENERATED_WARNING_HEADER:)
.#
.#  ===========================================================================
.output "src/Makemodule.am"
$(project.GENERATED_WARNING_HEADER:)
.libs = ""
.if count (class)
.   libs += "src/$(project.libname).la"
.endif
.if count (use)
.   libs += " ${project_libs}"
.endif
program_libs = $(libs:)

# Programs need to link the c++ runtime if everything was compiled statically.
if !ENABLE_SHARED
program_libs += -lstdc++ -lm
endif

.if count (class)
lib_LTLIBRARIES += src/$(project.libname).la
pkgconfig_DATA = src/$(project.libname).pc

.endif
.if count (class)
include_HEADERS = \\
.if file.exists ("include/$(project.prelude)")
    include/$(project.prelude) \\
.endif
.if count (class, class.c_name = project.name) = 0
    include/$(project.header:) \\
.endif
.for header where scope = "public"
    include/$(name:c).h \\
.endfor
.for class where scope = "public" & !draft
    include/$(name:c).h \\
.endfor
    include/$(project.prefix)_library.h

.if count (class, scope = "public" & draft)
if ENABLE_DRAFTS
include_HEADERS += \\
.   for class where scope = "public" & draft
    include/$(name:c).h$(last ()?? "\n"? " \\")
.   endfor
endif
.endif
src_$(project.libname)_la_SOURCES = \\
.for class where !draft
.   if file.exists ("src/$(name:c).cc")
    src/$(name:c).cc \\
.   else
    src/$(name:c).c \\
.   endif
.endfor
.for extra
    src/$(name) \\
.endfor
    src/platform.h

.if count (class, draft)
if ENABLE_DRAFTS
src_$(project.libname)_la_SOURCES += \\
.   for class where draft
.       if file.exists ("src/$(name:c).cc")
    src/$(name:c).cc$(last ()?? "\n"? " \\")
.       else
    src/$(name:c).c$(last ()?? "\n"? " \\")
.       endif
.   endfor
endif

.endif
src_$(project.libname)_la_CPPFLAGS = ${AM_CPPFLAGS}
.if project.use_cxx
src_$(project.libname)_la_CXXFLAGS = ${AM_CXXFLAGS}
.endif

src_$(project.libname)_la_LDFLAGS = \\
    -version-info @LTVER@ \\
    \$(LIBTOOL_EXTRA_LDFLAGS)

.if file.exists ("src/$(project.libname).sym")
if HAVE_LD_VERSION_SCRIPT
src_$(project.libname)_la_LDFLAGS += \\
    -Wl,--version-script=\$(top_srcdir)/src/$(project.libname).sym
else
src_$(project.libname)_la_LDFLAGS += \\
    -export-symbols \$(top_srcdir)/src/$(project.libname).sym
endif

.endif
if ON_MINGW
src_$(project.libname)_la_LDFLAGS += \\
    -no-undefined \\
    -avoid-version
endif

if ON_CYGWIN
src_$(project.libname)_la_LDFLAGS += \\
    -no-undefined \\
    -avoid-version
endif

src_$(project.libname)_la_LIBADD = ${project_libs}

.endif
.if systemd ?= 1
if WITH_SYSTEMD_UNITS
systemdsystemunit_DATA =
endif #WITH_SYSTEMD_UNITS

.endif
.for project.main
if ENABLE_$(NAME:c)
.   if main.test ?= 1
check_PROGRAMS += src/$(main.name)
noinst_PROGRAMS += src/$(main.name)
.   elsif main.scope = "public"
bin_PROGRAMS += src/$(main.name)
.   else
noinst_PROGRAMS += src/$(main.name)
.   endif
src_$(main.name:c)_CPPFLAGS = ${AM_CPPFLAGS}
src_$(main.name:c)_LDADD = ${program_libs}
src_$(name:c)_SOURCES = $(main.source)
.#
.#  Systemd stuff
.   if main.service ?= 1
src_$(main.name:c)_config_DATA = src/$(main.name).cfg
src_$(main.name:c)_configdir = \$(sysconfdir)/$(project.name)
if WITH_SYSTEMD_UNITS
systemdsystemunit_DATA += src/$(main.name).service
endif #WITH_SYSTEMD_UNITS
.   endif
endif #ENABLE_$(NAME:c)

.endfor
.for bin
.   if first ()
# Install data into /usr/local/bin
$(project.name:c)dir = @bindir@
$(project.name:c)_SCRIPTS = \\
.   endif
    $(bin.name)$(last ()?? "\n"? " \\")
.endfor
.for class where defined (class.api)
.   if first ()
# Install api files into /usr/local/share/zproject
apidir = @datadir@/zproject/$(project.name)
dist_api_DATA = \\
.   endif
.# Install files that the api includes
.   for class.include
    api/$(include.filename) \\
.   endfor
    $(class.api)$(last ()?? "\n"? " \\")
.endfor
.if count (project.class)
# define custom target for all products of /src
src:
.   for project.main
\tsrc/$(main.name) \\
.   endfor
\tsrc/$(project.libname).la

.endif
.for model
.   if first ()
# Produce generated code from models in the src directory
code:
.   endif
.   if defined (model.script)
\tcd $\(srcdir)/src; gsl -topdir:.. -zproject:1 -script:$(script:) \
. for model.param
-$(param.name):$(param.value) \
. endfor
-q $(name:c).xml
.   else
\tcd $\(srcdir)/src; gsl -topdir:.. -zproject:1 -q $(name).xml
.   endif
.endfor
\tcd $\(srcdir); gsl -target:- project.xml

check-local: src/$(project.prefix)_selftest
\t$\(LIBTOOL) --mode=execute $\(builddir)/src/$(project.prefix)_selftest

check-verbose: src/$(project.prefix)_selftest
\t$\(LIBTOOL) --mode=execute $\(builddir)/src/$(project.prefix)_selftest -v

# Run the selftest binary under valgrind to check for memory leaks
memcheck: src/$(project.prefix)_selftest
\t$\(LIBTOOL) --mode=execute valgrind --tool=memcheck \\
\t\t--leak-check=full --show-reachable=yes --error-exitcode=1 \\
\t\t--suppressions=$\(srcdir)/src/.valgrind.supp \\
\t\t$\(builddir)/src/$(project.prefix)_selftest

# Run the selftest binary under valgrind to check for performance leaks
callcheck: src/$(project.prefix)_selftest
\t$\(LIBTOOL) --mode=execute valgrind --tool=callgrind \\
\t\t$\(builddir)/src/$(project.prefix)_selftest

# Run the selftest binary under gdb for debugging
debug: src/$(project.prefix)_selftest
\t$\(LIBTOOL) --mode=execute gdb -q \\
\t\t$\(builddir)/src/$(project.prefix)_selftest

# Run the selftest binary with verbose switch for tracing
animate: src/$(project.prefix)_selftest
\t$\(LIBTOOL) --mode=execute $\(builddir)/src/$(project.prefix)_selftest -v

if WITH_GCOV
coverage: src/$(project.prefix)_selftest
\t@echo "called configure --with-gcov"
\tlcov --base-directory . --directory . --zerocounters -q
\t\$(MAKE) check
\tlcov --base-directory . --directory . --capture -o coverage.info
\tlcov --remove coverage.info "/usr*" -o coverage.info
\tlcov --remove coverage.info "$(project.prefix)_selftest.c" -o coverage.info
\t\$(RM) -rf coverage/*
\tgenhtml -o coverage/ -t "$(project.name) test coverage" --num-spaces 4 coverage.info
else
coverage: src/$(project.prefix)_selftest
\t@echo "call make clean && configure --with-gcov to enable code coverage"
\t@exit 1
endif

$(project.GENERATED_WARNING_HEADER:)
.#
.#  Generate infrastructure for services
.for project.main where main.service ?= 1
.if !file.exists ("src/$(main.name).cfg.in")
.       output "src/$(main.name).cfg.in"
#   $(main.name) configuration

server
    timeout = 10000     #   Client connection timeout, msec
    background = 0      #   Run as background process
    workdir = .         #   Working directory for daemon
    verbose = 0         #   Do verbose logging of activity?
.endif
.if !file.exists ("src/$(main.name).service.in")
.   output "src/$(main.name).service.in"
[Unit]
Description=$(main.name) service
After=network.target

[Service]
Type=simple
Environment="prefix=@prefix@"
ExecStart=@prefix@/bin/$(main.name) @sysconfdir@/@PACKAGE@/$(main.name).cfg

[Install]
WantedBy=multi-user.target
.endif
.endfor
.close
.endmacro

.macro generate_libtool_files
.output "src/$(project.libname).pc.in"
$(project.GENERATED_WARNING_HEADER:)

prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
includedir=@includedir@

Name: $(project.libname)
Description: $(project.description:)
Version: @VERSION@

.if count (use)
Requires:\
.   for use where use.optional = 0
$(use.libname)\
.       if (use.min_version <> '0.0.0')
 >= $(use.min_version)\
.       endif
.       if !last ()
 \
.       endif
.   endfor

.endif

Libs: -L${libdir} -l$(project.linkname)
Cflags: -I${includedir} @pkg_config_defines@

$(project.GENERATED_WARNING_HEADER:)
.endmacro

.macro generate_mkman
.output "doc/mkman"
#! /usr/bin/perl
#
#   mkman - Generates man pages from C source and header files.
#
#   Syntax: './mkman classname', in doc subdirectory.
#
#   Copyright (c) 1996-2016 iMatix Corporation
#
#   This is free software; you can redistribute it and/or modify it under the
#   terms of the GNU General Public License as published by the Free Software
#   Foundation; either version 3 of the License, or (at your option) any later
#   version.
#
#   This software is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABIL-
#   ITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
#   License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program. If not, see <http://www.gnu.org/licenses/>.
#
use File::Basename;

sub pull {
    local ($_) = @_;
    if (/^(.*)(@[a-zA-Z0-9]+)(,(\\w*)\\s*)?/) {
        $file = $1;
        $tag = $2;
        $opts = $4;
        $text = "";
        $ext = (fileparse("$file", qr/[^.]*/))[2];
        die "Can't read $file: $!"
            unless open (SOURCE, $file);

        while (<SOURCE>) {
            if (/$tag/) {
                while (<SOURCE>) {
                    last if /\\@discuss/ || /\\@end/ || /\\@ignore/;
                    $_ = "    $_" if ($opts eq "code");
                    s/^    // if ($opts eq "left");
                    $_ = "    $_" if ($opts eq "test");
                    s/^        /    / if ($opts eq "test");
                    $text .= $_;
                }
            }
        }
        close (SOURCE);
        # Add code fences for markdown highlighting
        $text = "```$ext\\n$text```\\n" if (length $text) and ($opts eq "code" or $opts eq "test");

        $text = "Please add $tag section in $file.\\n" unless $text;
        return $text;
    }
    else {
        print "E: bad pull request: $_\\n";
    }
}

sub generate_manpage {
    local ($name) = @_;
    $name = $1 if $name =~ /(\\w+)\\.\\w+/;
    $outp = $2 if $outp =~ /(\w+)\.\w+/;

    #   Check if we're making the man page for a main program, or a class

    $cat = 0;           #   Unknown category
    exit unless open (MAKEFILE, "Makefile");
    while (<MAKEFILE>) {
        if (/MAN1.*$outp\\.1/) {
.if project.use_cxx
            $source = "../src/$name.cc";
            $header = "../src/$name.cc";
.else
            $source = "../src/$name.c";
            $header = "../src/$name.c";
.endif
            $cat = 1;
            last;
        }
        elsif (/MAN3.*$name\\.3/) {
.if project.use_cxx
            $source = "../src/$name.cc";
.else
            $source = "../src/$name.c";
.endif
            $header = "../include/$name.h";
            $cat = 3;
            last;
        }
    }
    close MAKEFILE;

    #   Look for class title in 2nd line of source
    #   If there's no class file, leave hand-written man page alone
    exit unless open (SOURCE, $source);
    $_ = <SOURCE>;
    $_ = <SOURCE>;
    $title = "no title found";
    $title = $1 if (/    \\w+ - (.*)/);
    close (SOURCE);

    #   Open output file
    die "Can't create $outp.txt: $!"
        unless open (OUTPUT, ">$outp.txt");

    printf "Generating $outp.txt...\\n";
    $underline = "=" x (length ($name) + 3);

    $template = <<"END";
$name($cat)
$underline

NAME
----
$outp - $title

SYNOPSIS
--------
----
pull $header\\@interface
----

DESCRIPTION
-----------

pull $source\\@header,left

pull $source\\@discuss,left

EXAMPLE
-------
\.From $name\\_test method
----
pull $source\\@selftest,left
----
END

    #   Now process template
    for (split /^/, $template) {
        if (/^pull (.*)$/) {
            print OUTPUT pull ($1);
        }
        else {
            print OUTPUT $_;
        }
    }

    #   Generate a simple text documentation for README.txt
    close OUTPUT;
    printf "Generating $outp.doc...\\n";
    die "Can't create $outp.doc: $!"
        unless open (OUTPUT, ">$outp.doc");
    print OUTPUT "#### $outp - $title\\n\\n";
    print OUTPUT pull ("$source\\@header,left");
    print OUTPUT "\\n";
    print OUTPUT pull ("$source\\@discuss,left");
    print OUTPUT "\\nThis is the class interface:\\n\\n";
    print OUTPUT pull ("$header\\@interface,code");
    print OUTPUT "\\nThis is the class self test code:\\n\\n";
    print OUTPUT pull ("$source\\@selftest,test");
    print OUTPUT "\\n";
    close OUTPUT;
}

$name = shift (@ARGV);
$outp = shift (@ARGV);
if (!$outp) {
    $outp=$name
}

generate_manpage ($name, $outp);
.close
.chmod_x ("doc/mkman")
.endmacro

.function discover_manpages (project)
.   man7 = "$(my.project.name:c).7"
.   man3 = ""
.   for my.project.class where scope = "public"
.      man3 += " $(name:c).3"
.      if class.name = my.project.name
.          man7 = ""
.      endif
.   endfor
.   man1 = ""
.   for my.project.main where scope = "public"
.      man1 += " $(name).1"
.      if "$(main.name)" = "$(my.project.name)"
.          man7 = ""
.      endif
.   endfor
.endfunction
.macro generate_man_pages
.output "doc/Makefile.am"
$(project.GENERATED_WARNING_HEADER:)
.discover_manpages(project)
MAN1 =$(man1)
MAN3 =$(man3)
MAN7 = $(man7)
MAN_DOC = $\(MAN1) $\(MAN3) $\(MAN7)

MAN_TXT = $\(MAN1:%.1=%.txt)
MAN_TXT += $\(MAN3:%.3=%.txt)
MAN_TXT += $\(MAN7:%.7=%.txt)

EXTRA_DIST = asciidoc.conf $\(MAN_TXT)

if INSTALL_MAN
dist_man_MANS = $\(MAN_DOC)
endif

if BUILD_DOC
DISTCLEANFILES = $\(MAN_DOC)

dist-hook : $\(MAN_DOC)

SUFFIXES=.txt .xml .1 .3 .7

\.txt.xml:
\tasciidoc -d manpage -b docbook -f $\(srcdir)/asciidoc.conf \\
        -a$(project.name:c)_version=@PACKAGE_VERSION@ -o$@ $<
\.xml.1:
\txmlto man $<
\.xml.3:
\txmlto man $<
\.xml.7:
\txmlto man $<

.for project.class where scope = "public"
$(name:c).txt:
\t./mkman $@
.endfor
.for project.main where scope = "public"
$(name).txt:
\t./mkman $(name:c) $@
.endfor
clean:
\trm -f *.1 *.3 *.7
.for project.class where scope = "public"
\t./mkman $(name:c)
.endfor
.for project.main where scope = "public"
\t./mkman $(name:c) $(name)
.endfor

endif
$(project.GENERATED_WARNING_HEADER:)
.output "doc/asciidoc.conf"
$(project.GENERATED_WARNING_HEADER:)
[paradef-default]
literal-style=template="literalparagraph"

[macros]
(?su)[\\\\]?(?P<name>link$(project.name:c)):(?P<target>\\S*?)\\[(?P<attrlist>.*?)\\]=

ifdef::backend-docbook[]
[link$(project.name:c)-inlinemacro]
{0%{target}}
{0#<citerefentry>}
{0#<refentrytitle>{target}</refentrytitle><manvolnum>{0}</manvolnum>}
{0#</citerefentry>}
endif::backend-docbook[]

ifdef::backend-xhtml11[]
[link$(project.name:c)-inlinemacro]
<a href="{target}.html">{target}{0?({0})}</a>
endif::backend-xhtml11[]

ifdef::doctype-manpage[]
ifdef::backend-docbook[]
[header]
template::[header-declarations]
<refentry>
<refmeta>
<refentrytitle>{mantitle}</refentrytitle>
<manvolnum>{manvolnum}</manvolnum>
<refmiscinfo class="source">$(project.name:Pascal)</refmiscinfo>
<refmiscinfo class="version">{$(project.name:c)_version}</refmiscinfo>
<refmiscinfo class="manual">$(project.name:Pascal) Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>{manname}</refname>
  <refpurpose>{manpurpose}</refpurpose>
</refnamediv>
[footer]
<refsect1 id="_authors">
<title>AUTHORS</title>
<simpara>The $(project.name) manual was written by the authors in the AUTHORS file.</simpara>
</refsect1>
<refsect1 id="_resources">
<title>RESOURCES</title>
<simpara>Main web site: <ulink url=""></ulink></simpara>
<simpara>Report bugs to the email &lt;<ulink url="mailto:$(project.email)">$(project.email)</ulink>&gt;</simpara>
</refsect1>
<refsect1 id="_copyright">
<title>COPYRIGHT</title>
<simpara>$(project->license.) <literal>LICENSE</literal> included with the $(project.name) distribution.</simpara>
</refsect1>
</refentry>
endif::backend-docbook[]
endif::doctype-manpage[]
.if !file.exists ("doc/$(project.name:c).txt")
.output "doc/$(project.name:c).txt"
Name(7)
=======


NAME
----
$(project.name:c) - $(project.description:)


SYNOPSIS
--------
----
#include <$(project.header:)>

cc ['flags'] 'files' -l$(project.linkname) ['libraries']
----


DESCRIPTION
-----------

Classes
~~~~~~~

Something.
.endif
.endmacro

function target_autotools
    directory.create ("src")
    directory.create ("doc")
    generate_autoconf_files ()
    generate_automake_files ()
    if count (class)
        generate_libtool_files ()
    endif
    generate_mkman ()
    generate_man_pages ()
endfunction

