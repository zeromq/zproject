.#  ===========================================================================
.#  Generate automake files for project
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details. This script
.#  is licensed under MIT/X11.
.#
.#  This script will generate the following files:
.#      * Makefile.am
.#      * src/Makemodule.am
.#      * doc/Makefile.am
.#  ===========================================================================
.echo "Generating Makefile.am..."
.output "Makefile.am"
ACLOCAL_AMFLAGS = -I config

AM_CPPFLAGS = \\
.for package_dependency where defined (package_dependency.for_all)
    \${$(package_dependency.name)_CFLAGS} \\
.endfor
    -I\$(srcdir)/include

SUBDIRS =

DIST_SUBDIRS =

lib_LTLIBRARIES =

bin_PROGRAMS =

check_PROGRAMS =

EXTRA_DIST = \\
.for project.extra  
    $(extra.name) \\
.endfor
    version.sh

include \$(srcdir)/src/Makemodule.am

.echo "Generating src/Makemodule.am..."
.if !file.exists ("src")
.   directory.create("src")
.endif    
.output "src/Makemodule.am"
#################################################################
#   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
#   Please read the README.txt file in the model directory.     #
#################################################################
.if (count (class) > 0)
lib_LTLIBRARIES += src/lib$(project.name).la

pkgconfig_DATA = src/lib$(project.name).pc

include_HEADERS = \\
.for header
    include/$(name).h \\
.endfor
.for class where !defined (class.private)
.   class.classdir = "include"
.   if last ()
    $(classdir)/$(name).h
.   else
    $(classdir)/$(name).h \\
.   endif
.endfor

src_lib$(project.name)_la_SOURCES = \\
    src/platform.h \\
.for extra
    src/$(name) \\
.endfor
.for class
.   if last ()
    src/$(name).c
.   else
    src/$(name).c \\
.   endif
.endfor

src_lib$(project.name)_la_CPPFLAGS = \\
.for package_dependency where defined (package_dependency.for_lib)
.   if last()
    \${$(package_dependency.name)_CFLAGS}
.   else
    \${$(package_dependency.name)_CFLAGS} \\
.   endif
.endfor
    ${AM_CPPFLAGS}


src_lib$(project.name)_la_LDFLAGS = \\
    -version-info @LTVER@ \\
    \$(LIBTOOL_EXTRA_LDFLAGS)

if ON_MINGW
src_lib$(project.name)_la_LDFLAGS += \\
    -no-undefined \\
    -avoid-version
endif

bin_PROGRAMS += src/$(project.name)_selftest

src_$(project.name)_selftest_CPPFLAGS = \\
.for package_dependency where defined (package_dependency.for_test)
    \${$(package_dependency.name)_CFLAGS} \\
.endfor
    \${src_lib$(project.name)_la_CFLAGS}

src_$(project.name)_selftest_LDADD = \\
.if count (package_dependency, defined (count.for_lib) | defined (count.for_test) | defined (count.for_all)) > 0
    src/lib$(project.name).la \\
.else
    src/lib$(project.name).la
.endif
.for package_dependency where defined (package_dependency.for_lib) | defined (package_dependency.for_test) | defined (package_dependency.for_all)
.   if last()
    \${$(package_dependency.name)_LIBS}
.   else
    \${$(package_dependency.name)_LIBS} \\
.endif
.endfor

src_$(project.name)_selftest_SOURCES = \\
    src/$(project.name)_selftest.c

TESTS = src/$(project.name)_selftest
.else
noinst_LTLIBRARIES = 
noinst_PROGRAMS = 
TESTS = 
.endif

.for bin
.   if first() 
# Install data into /usr/local/bin
$(project.name)dir = @bindir@
$(project.name)_DATA = \\
.   endif    
.   if !last()
    $(bin.name) \\
.   else
    $(bin.name)
.   endif    
.endfor

.if (count (class) > 0)
# define custom target for all products of /src
src: src/lib$(project.name).la src/$(project.name)_selftest
.endif

.for model
.   if first ()
# Produce generated models; do this manually in src directory
code:
.   endif
\tcd $\(srcdir/src); gsl -q $(name).xml
.endfor
#################################################################
#   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
#   Please read the README.txt file in the model directory.     #
#################################################################
.echo "Generating doc/Makefile.am..."
.if !file.exists ("doc")
.   directory.create("doc")
.endif    
.output "doc/Makefile.am"
#################################################################
#   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
#   Please read the README.txt file in the model directory.     #
#################################################################
.project.manpage = "$(project.name).7"
.manpages = ""
.for class where private?0 = 0
.   manpages += " $(name).3"
.   if class.name = project.name
.       project.manpage = ""
.   endif
.endfor
MAN1 =
MAN3 =$(manpages)
MAN7 = $\(srcdir)/$(project.manpage)
MAN_DOC = $\(MAN1) $\(MAN3) $\(MAN7)

MAN_TXT = $\(MAN1:%.1=%.txt)
MAN_TXT += $\(MAN3:%.3=%.txt)
MAN_TXT += $\(MAN7:%.7=%.txt)

EXTRA_DIST = asciidoc.conf mkman $\(MAN_TXT)

if BUILD_DOC
if INSTALL_MAN
dist_man_MANS = $\(MAN_DOC)
endif

MAINTAINERCLEANFILES = $\(MAN_DOC)

dist-hook : $\(MAN_DOC)

SUFFIXES=.txt .xml .1 .3 .7

\.txt.xml:
    $\(srcdir)/mkman $<
    asciidoc -d manpage -b docbook -f $\(srcdir)/asciidoc.conf \\
        -a$(project.name)_version=@PACKAGE_VERSION@ -o$@ $<
\.xml.1:
    xmlto man $<
\.xml.3:
    xmlto man $<
\.xml.7:
    xmlto man $<
endif
#################################################################
#   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
#   Please read the README.txt file in the model directory.     #
#################################################################
