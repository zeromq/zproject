#   Generate CMake project file for project
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("cmake", "CMake build system")

.macro target_cmake
.output "CMakeLists.txt"
$(project.GENERATED_WARNING_HEADER:)

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8.8)
project($(project.name:c))
.if project.use_cxx
enable_language(CXX)
.else
enable_language(C)
.endif
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
# Select flags
SET(CMAKE_C_FLAGS_RELEASE "-O3")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/builds/cmake/Modules)

# Will be used to add flags to pkg-config useful when apps want to statically link
set(pkg_config_libs_private "")

########################################################################
# options
########################################################################
.if project.stable
if (NOT CMAKE_BUILD_TYPE)
    if (EXISTS "${SOURCE_DIR}/.git")
        set (CMAKE_BUILD_TYPE Debug)
    else ()
# http://xit0.org/2013/04/cmake-use-git-branch-and-commit-details-in-project/
# http://stackoverflow.com/questions/6797395/cmake-execute-process-always-fails-with-no-such-file-or-directory-when-i-cal
        execute_process(
            COMMAND git rev-parse --show-toplevel
            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
            RESULT_VARIABLE git_result
            OUTPUT_VARIABLE git_root
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
        message(STATUS "git workspace root [${git_result}]: ${git_root}")
        if ( "${git_result}" == "0" )
            set (CMAKE_BUILD_TYPE Debug)
        else ()
            set (CMAKE_BUILD_TYPE Release)
        endif ()
    endif ()
endif ()
if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" ON)
else ()
    OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" OFF)
endif ()
.else
OPTION (ENABLE_DRAFTS "Build and install draft classes and methods" ON)
.endif
IF (ENABLE_DRAFTS)
    ADD_DEFINITIONS (-D$(PROJECT.PREFIX)_BUILD_DRAFT_API)
ENDIF (ENABLE_DRAFTS)

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(WRITE "${SOURCE_DIR}/src/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${SOURCE_DIR}/src/platform.h.in" "${SOURCE_DIR}/src/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
.   if project.use_cxx
    file(GLOB sources "${SOURCE_DIR}/src/*.$(project.source_ext)")
.   else
    file(GLOB sources "${SOURCE_DIR}/src/*.$(project.source_ext)")
.   endif
    set_source_files_properties(
        ${sources}
        PROPERTIES LANGUAGE CXX
    )
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# specific case of windows UWP
if( "${CMAKE_SYSTEM_NAME}" STREQUAL "WindowsStore" AND "${CMAKE_SYSTEM_VERSION}" STREQUAL "10.0")
  ADD_DEFINITIONS(-DZMQ_HAVE_WINDOWS_UWP)
  ADD_DEFINITIONS(-D_WIN32_WINNT=_WIN32_WINNT_WIN10)
endif()


# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")
set(OPTIONAL_LIBRARIES)
.for use

########################################################################
# $(USE.PROJECT) dependency
########################################################################
.if use.optional = 0
find_package($(use.project) REQUIRED)
.else
find_package($(use.project))
.endif
IF ($(USE.PROJECT)_FOUND)
.if use.libname ?<> ""
    include_directories(${$(USE.PROJECT)_INCLUDE_DIRS})
    list(APPEND MORE_LIBRARIES ${$(USE.PROJECT)_LIBRARIES})
    set(pkg_config_libs_private "${pkg_config_libs_private} -l$(use.linkname)")
.if use.optional = 1
    add_definitions(-DHAVE_$(USE.LIBNAME))
    list(APPEND OPTIONAL_LIBRARIES ${$(USE.PROJECT)_LIBRARIES})
.endif
.endif
.   if defined (use.description)
    set_feature_info($(use.project) "$(use.description:)")
.   endif
.if use.optional = 0
ELSE ($(USE.PROJECT)_FOUND)
    message( FATAL_ERROR "$(use.project) not found." )
.endif
ENDIF ($(USE.PROJECT)_FOUND)
.endfor

########################################################################
# version
########################################################################
.if defined (project->version)
set($(PROJECT.PREFIX)_VERSION_MAJOR $(project->version.major))
set($(PROJECT.PREFIX)_VERSION_MINOR $(project->version.minor))
set($(PROJECT.PREFIX)_VERSION_PATCH $(project->version.patch))
.else
set($(PROJECT.PREFIX)_VERSION_MAJOR "0")
set($(PROJECT.PREFIX)_VERSION_MINOR "0")
set($(PROJECT.PREFIX)_VERSION_PATCH "0")
.endif
set($(PROJECT.PREFIX)_VERSION "${$(PROJECT.PREFIX)_VERSION_MAJOR}.${$(PROJECT.PREFIX)_VERSION_MINOR}.${$(PROJECT.PREFIX)_VERSION_PATCH}")
message(STATUS "Detected $(PROJECT.PREFIX) Version - ${$(PROJECT.PREFIX)_VERSION}")


########################################################################
# includes
########################################################################
set ($(project.prefix)_headers
.if count (project.class)
    include/$(project.prefix)_library.h
.   if file.exists ("include/$(project.prelude)")
    include/$(project.prelude)
.   endif
.   if count (class, class.name = project.name) = 0
    include/$(project.header:)
.   endif
.endif
.for header where scope = "public"
    include/$(name:$(project.filename_prettyprint)).$(project.header_ext)
.endfor
.for class where scope = "public" & !draft
    include/$(name:$(project.filename_prettyprint)).$(project.header_ext)
.endfor
.for class where scope = "private"
    src/$(name:$(project.filename_prettyprint)).$(project.header_ext)
.endfor
.for extra
    src/$(name)
.endfor
)
.if count (class, scope = "public" & draft)

IF (ENABLE_DRAFTS)
    list(APPEND $(project.prefix)_headers
.   for class where scope = "public" & draft
        include/$(name:$(project.filename_prettyprint)).$(project.header_ext)
.   endfor
    )
ENDIF (ENABLE_DRAFTS)
.   endif

source_group ("Header Files" FILES ${$(project.prefix)_headers})
install(FILES ${$(project.prefix)_headers} DESTINATION include)

.if count (project.class)
########################################################################
# library
########################################################################


include_directories("${SOURCE_DIR}/src" "${SOURCE_DIR}/include")
set ($(project.linkname)_sources
.for class where !draft
.   if project.use_cxx
    src/$(name:$(project.filename_prettyprint)).$(project.source_ext)
.   else
    src/$(name:$(project.filename_prettyprint)).$(project.source_ext)
.   endif
.endfor
)
.if count (class, draft)

IF (ENABLE_DRAFTS)
    list (APPEND $(project.linkname)_sources
.   for class where draft
.       if project.use_cxx
        src/$(name:$(project.filename_prettyprint)).$(project.source_ext)
.       else
        src/$(name:$(project.filename_prettyprint)).$(project.source_ext)
.       endif
.   endfor
    )
ENDIF (ENABLE_DRAFTS)

.endif
.if count (class)
IF (ENABLE_DRAFTS)
    list (APPEND $(project.linkname)_sources
.   if project.use_cxx
        src/$(project.prefix)_private_selftest.$(project.source_ext)
.   else
        src/$(project.prefix)_private_selftest.$(project.source_ext)
.   endif
    )
ENDIF (ENABLE_DRAFTS)

.endif
source_group("Source Files" FILES ${$(project.linkname)_sources})


option($(PROJECT.PREFIX)_BUILD_SHARED "Whether or not to build the shared object" ON)
option($(PROJECT.PREFIX)_BUILD_STATIC "Whether or not to build the static archive" ON)

if (NOT $(PROJECT.PREFIX)_BUILD_SHARED AND NOT $(PROJECT.PREFIX)_BUILD_STATIC)
  message(FATAL_ERROR "Neither static nor shared library build enabled")
endif()

IF (NOT MSVC)
  # avoid building everything twice for shared + static
  # only on *nix, as Windows needs different preprocessor defines in static builds
  add_library ($(project.linkname)_objects OBJECT ${$(project.linkname)_sources})
  set_property(TARGET $(project.linkname)_objects PROPERTY POSITION_INDEPENDENT_CODE ON)
ENDIF (NOT MSVC)

# shared
if ($(PROJECT.PREFIX)_BUILD_SHARED)
  IF (MSVC)
    add_library($(project.linkname) SHARED ${$(project.linkname)_sources})
  ELSE (MSVC)
    add_library($(project.linkname) SHARED $<TARGET_OBJECTS:$(project.linkname)_objects>)
  ENDIF (MSVC)

  set_target_properties ($(project.linkname) PROPERTIES
    PUBLIC_HEADER "${public_headers}"
    DEFINE_SYMBOL "$(PROJECT.PREFIX)_EXPORTS"
.if defined (project->abi)
    SOVERSION "$(project->abi.current - project->abi.age)"
.else
    SOVERSION "0"
.endif
    VERSION "${$(PROJECT.PREFIX)_VERSION}"
    COMPILE_DEFINITIONS "DLL_EXPORT"
    OUTPUT_NAME "$(project.linkname)"
    PREFIX "lib"
  )

  target_link_libraries($(project.linkname)
    ${ZEROMQ_LIBRARIES} ${MORE_LIBRARIES}
  )

  install(TARGETS $(project.linkname)
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin                # .dll file
  )

  target_include_directories($(project.linkname)
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
  )
endif()

# static
if ($(PROJECT.PREFIX)_BUILD_STATIC)
  IF (MSVC)
    add_library($(project.linkname)-static STATIC ${$(project.linkname)_sources})
  ELSE (MSVC)
    add_library($(project.linkname)-static STATIC $<TARGET_OBJECTS:$(project.linkname)_objects>)
  ENDIF (MSVC)

  set_target_properties($(project.linkname)-static PROPERTIES
    PUBLIC_HEADER "${public_headers}"
    COMPILE_DEFINITIONS "$(PROJECT.PREFIX)_STATIC"
    OUTPUT_NAME "$(project.linkname)"
    PREFIX "lib"
  )

  target_link_libraries($(project.linkname)-static
    ${ZEROMQ_LIBRARIES} ${MORE_LIBRARIES}
  )

  install(TARGETS $(project.linkname)-static
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin                # .dll file
  )

  target_include_directories($(project.linkname)-static
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
  )
  target_compile_definitions($(project.linkname)-static
    PUBLIC $(PROJECT.PREFIX)_STATIC
  )

endif()


.if file.exists ("src/CMakeLists-local.txt")
include(${CMAKE_CURRENT_SOURCE_DIR}/src/CMakeLists-local.txt) # Optional project-local hook
.endif

########################################################################
# pkgconfig
########################################################################
set (VERSION "$(->version.major).$(->version.minor).$(->version.patch)")
set (prefix "${CMAKE_INSTALL_PREFIX}")
set (exec_prefix "\\${prefix}")
set (libdir "\\${prefix}/lib${LIB_SUFFIX}")
set (includedir "\\${prefix}/include")
IF (ENABLE_DRAFTS)
    set (pkg_config_defines "-D$(PROJECT.PREFIX)_BUILD_DRAFT_API=1")
ELSE (ENABLE_DRAFTS)
    set (pkg_config_defines "")
ENDIF (ENABLE_DRAFTS)
configure_file(
    "${SOURCE_DIR}/src/$(project.libname).pc.in"
    "${SOURCE_DIR}/src/$(project.libname).pc"
@ONLY)

install(
    FILES "${SOURCE_DIR}/src/$(project.libname).pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

.endif
########################################################################
# executables
########################################################################
.for project.main
add_executable(
    $(main.name)
.   if project.use_cxx
    "${SOURCE_DIR}/src/$(name).$(project.source_ext)"
.   else
    "${SOURCE_DIR}/src/$(name).$(project.source_ext)"
.   endif
)
if (TARGET $(project.linkname))
target_link_libraries(
    $(main.name)
.if count (project.class)
    $(project.linkname)
.endif
.for project.use
.if use.optional = 0
    ${$(USE.PROJECT)_LIBRARIES}
.endif
.endfor
    ${OPTIONAL_LIBRARIES}
)
endif()
if (NOT TARGET $(project.linkname) AND TARGET $(project.linkname)-static)
target_link_libraries(
    $(main.name)
.if count (project.class)
    $(project.linkname)-static
.endif
.for project.use
.if use.optional = 0
    ${$(USE.PROJECT)_LIBRARIES}
.endif
.endfor
    ${OPTIONAL_LIBRARIES}
)
endif()
.   if main.scope = "public"
install(TARGETS $(main.name)
    RUNTIME DESTINATION bin
)
.   endif
.endfor

########################################################################
# tests
########################################################################
set(CLASSTEST_TIMEOUT 60 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 600 CACHE STRING "Timout of the total testsuite")

if(UNIX)
    find_program(MEMORYCHECK_COMMAND valgrind)
    set(MEMORYCHECK_COMMAND_OPTIONS "--leak-check=full --show-reachable=yes
                                     --error-exitcode=1
                                     --suppressions=src/.valgrind.supp")
endif()

set(TEST_CLASSES
.for class where !draft & private ?<> 1
    $(name:c)
.endfor
)

.if count (class, draft & private ?<> 1)
IF (ENABLE_DRAFTS)
    list (APPEND TEST_CLASSES
.   for class where draft & private ?<> 1
    $(name:c)
.   endfor
    )
ENDIF (ENABLE_DRAFTS)

.endif
.if count (class)
IF (ENABLE_DRAFTS)
    list (APPEND TEST_CLASSES
    private_classes
    )
ENDIF (ENABLE_DRAFTS)

.endif

add_custom_target(
    copy-selftest-ro ALL
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/src/selftest-ro ${CMAKE_BINARY_DIR}/src/selftest-ro
)

add_custom_target(
    make-selftest-rw ALL
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/src/selftest-rw
)

set_directory_properties(
    PROPERTIES
    ADDITIONAL_MAKE_CLEAN_FILES "${CMAKE_BINARY_DIR}/src/selftest-ro;${CMAKE_BINARY_DIR}/src/selftest-rw"
)

foreach(TEST_CLASS ${TEST_CLASSES})
    add_test(
        NAME ${TEST_CLASS}
        COMMAND $(project.prefix)_selftest --continue --verbose --test ${TEST_CLASS}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT}
    )
    set_tests_properties(
        ${TEST_CLASS}
        PROPERTIES DEPENDS "copy-selftest-ro;make-selftest-rw"
    )
endforeach(TEST_CLASS)

include(CTest)

########################################################################
# cleanup
########################################################################
add_custom_target (distclean @echo Cleaning for source distribution)

set(cmake_generated ${CMAKE_BINARY_DIR}/CMakeCache.txt
                    ${CMAKE_BINARY_DIR}/cmake_install.cmake
                    ${CMAKE_BINARY_DIR}/Makefile
                    ${CMAKE_BINARY_DIR}/CMakeFiles
                    ${CMAKE_BINARY_DIR}/CTestTestfile.cmake
                    ${CMAKE_BINARY_DIR}/DartConfiguration.tcl
                    ${CMAKE_BINARY_DIR}/Testing
                    ${CMAKE_BINARY_DIR}/compile_commands.json
                    ${CMAKE_BINARY_DIR}/src/platform.h
                    ${CMAKE_BINARY_DIR}/src/$(project.libname).pc
                    ${CMAKE_BINARY_DIR}/src/$(project.libname).so
                    ${CMAKE_BINARY_DIR}/src/$(project.name)_selftest
.for project.main
                    ${CMAKE_BINARY_DIR}/src/$(main.name)
.endfor
)

add_custom_command(
    DEPENDS clean
    COMMENT "distribution clean"
    COMMAND rm
    ARGS    -rf CMakeTmp ${cmake_generated}
    TARGET  distclean
)

include(ClangFormat)

########################################################################
# summary
########################################################################
message ("")
message (STATUS "******************* Configuration Summary *******************")
message (STATUS "General:")
message (STATUS "  Version           :   ${VERSION}")
message (STATUS "  System            :   ${CMAKE_SYSTEM_NAME}")
message (STATUS "  C compiler        :   ${CMAKE_C_COMPILER}")
message (STATUS "  Debug C flags     :   ${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS}")
message (STATUS "  Release C flags   :   ${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS}")
message (STATUS "  Build type        :   ${CMAKE_BUILD_TYPE}")
message (STATUS "  Static build      :   ${$(PROJECT.PREFIX)_BUILD_STATIC}")
message (STATUS "  Shared build      :   ${$(PROJECT.PREFIX)_BUILD_SHARED}")
IF (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   Yes")
ELSE (ENABLE_DRAFTS)
message (STATUS "  Draft API         :   No")
ENDIF (ENABLE_DRAFTS)
message (STATUS "")
message (STATUS "Dependencies:")
include(FeatureSummary)
feature_summary (WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
message (STATUS "")
message (STATUS "Install:")
message (STATUS "  Install prefix    :" "${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "************************* Options ***************************")
message (STATUS "Options:")
message (STATUS "  Use the Draft API (default = yes):")
message (STATUS "  -DENABLE-DRAFTS=[yes|no]")
message (STATUS "")
message (STATUS "*************************************************************")
message (STATUS "Configuration complete! Now procced with:")
message (STATUS "  'make'                compile the project")
message (STATUS "  'make test'           run the project's selftest")
message (STATUS "  'make install'        install the project to ${CMAKE_INSTALL_PREFIX}")
message (STATUS "")
message (STATUS "Further options are:")
message (STATUS "  'ctest -T memcheck'   run the project's selftest with")
message (STATUS "                        valgrind to check for memory leaks")
message (STATUS "")

$(project.GENERATED_WARNING_HEADER:)
.
.for use
.output "Find$(use.project:c).cmake"
$(project.GENERATED_WARNING_HEADER:)

.   if use.libname ?<> ""
if (NOT MSVC)
    include(FindPkgConfig)
    pkg_check_modules(PC_$(USE.PROJECT) "$(use.libname)")
    if (NOT PC_$(USE.PROJECT)_FOUND)
        pkg_check_modules(PC_$(USE.PROJECT) "$(use.libname)")
    endif (NOT PC_$(USE.PROJECT)_FOUND)
    if (PC_$(USE.PROJECT)_FOUND)
        # add CFLAGS from pkg-config file, e.g. draft api.
        add_definitions(${PC_$(USE.PROJECT)_CFLAGS} ${PC_$(USE.PROJECT)_CFLAGS_OTHER})
        # some libraries install the headers is a subdirectory of the include dir
        # returned by pkg-config, so use a wildcard match to improve chances of finding
        # headers and SOs.
        set(PC_$(USE.PROJECT)_INCLUDE_HINTS ${PC_$(USE.PROJECT)_INCLUDE_DIRS} ${PC_$(USE.PROJECT)_INCLUDE_DIRS}/*)
        set(PC_$(USE.PROJECT)_LIBRARY_HINTS ${PC_$(USE.PROJECT)_LIBRARY_DIRS} ${PC_$(USE.PROJECT)_LIBRARY_DIRS}/*)
    endif(PC_$(USE.PROJECT)_FOUND)
endif (NOT MSVC)

find_path (
    $(USE.PROJECT)_INCLUDE_DIRS
    NAMES $(use.header)
    HINTS ${PC_$(USE.PROJECT)_INCLUDE_HINTS}
)

find_library (
    $(USE.PROJECT)_LIBRARIES
    NAMES $(use.prefix)
    HINTS ${PC_$(USE.PROJECT)_LIBRARY_HINTS}
)

include(FindPackageHandleStandardArgs)

find_package_handle_standard_args(
    $(USE.PROJECT)
    REQUIRED_VARS $(USE.PROJECT)_LIBRARIES $(USE.PROJECT)_INCLUDE_DIRS
)
mark_as_advanced(
    $(USE.PROJECT)_FOUND
    $(USE.PROJECT)_LIBRARIES $(USE.PROJECT)_INCLUDE_DIRS
)

.   else
find_program (
    $(USE.PROJECT)_BIN
    $(use.project)
)

include(FindPackageHandleStandardArgs)

find_package_handle_standard_args(
    $(USE.PROJECT)
    REQUIRED_VARS $(USE.PROJECT)_BIN
)
mark_as_advanced(
    $(USE.PROJECT)_FOUND
)

.   endif
$(project.GENERATED_WARNING_HEADER:)
.endfor
.close
.
.# CI testing for using cmake
.directory.create ('builds/cmake')
.output "builds/cmake/ci_build.sh"
#!/usr/bin/env bash
set -e

# Set this to enable verbose profiling
[ -n "${CI_TIME-}" ] || CI_TIME=""
case "$CI_TIME" in
    [Yy][Ee][Ss]|[Oo][Nn]|[Tt][Rr][Uu][Ee])
        CI_TIME="time -p " ;;
    [Nn][Oo]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee])
        CI_TIME="" ;;
esac

# Set this to enable verbose tracing
[ -n "${CI_TRACE-}" ] || CI_TRACE="no"
case "$CI_TRACE" in
    [Nn][Oo]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee])
        set +x ;;
    [Yy][Ee][Ss]|[Oo][Nn]|[Tt][Rr][Uu][Ee])
        set -x ;;
esac

LANG=C
LC_ALL=C
export LANG LC_ALL

if [ -d "./tmp" ]; then
    rm -rf ./tmp
fi
mkdir -p tmp
BUILD_PREFIX=$PWD/tmp

CONFIG_OPTS=()
CONFIG_OPTS+=("CFLAGS=-I${BUILD_PREFIX}/include")
CONFIG_OPTS+=("CPPFLAGS=-I${BUILD_PREFIX}/include")
CONFIG_OPTS+=("CXXFLAGS=-I${BUILD_PREFIX}/include")
CONFIG_OPTS+=("LDFLAGS=-L${BUILD_PREFIX}/lib")
CONFIG_OPTS+=("PKG_CONFIG_PATH=${BUILD_PREFIX}/lib/pkgconfig")
CONFIG_OPTS+=("--prefix=${BUILD_PREFIX}")
CONFIG_OPTS+=("--with-docs=no")
if [ -z "${CI_CONFIG_QUIET-}" ] || [ "${CI_CONFIG_QUIET-}" = yes ] || [ "${CI_CONFIG_QUIET-}" = true ]; then
    CONFIG_OPTS+=("--quiet")
fi

CMAKE_OPTS=()
CMAKE_OPTS+=("-DCMAKE_INSTALL_PREFIX:PATH=${BUILD_PREFIX}")
CMAKE_OPTS+=("-DCMAKE_PREFIX_PATH:PATH=${BUILD_PREFIX}")
CMAKE_OPTS+=("-DCMAKE_LIBRARY_PATH:PATH=${BUILD_PREFIX}/lib")
CMAKE_OPTS+=("-DCMAKE_INCLUDE_PATH:PATH=${BUILD_PREFIX}/include")

if [ "$CLANG_FORMAT" != "" ] ; then
    CMAKE_OPTS+=("-DCLANG_FORMAT=${CLANG_FORMAT}")
fi

# Clone and build dependencies
[ -z "$CI_TIME" ] || echo "`date`: Starting build of dependencies (if any)..."
.for use where defined (use.tarball)
if \
.   if defined (use.debian_name)
.       if !(use.debian_name = '')
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.debian_name) >/dev/null 2>&1) || \\
.       endif
.   elsif defined (use.libname)
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.libname)-dev >/dev/null 2>&1) || \\
.   else
\! (command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.project)-dev >/dev/null 2>&1) || \\
.   endif
       (command -v brew >/dev/null 2>&1 && brew ls --versions $(use.project) >/dev/null 2>&1) \\
; then
    BASE_PWD=${PWD}
    wget $(use.tarball)
    tar -xzf \$(basename "$(use.tarball)")
    cd \$(basename "$(use.tarball)" .tar.gz)
.   if defined (use.builddir)
    cd ./$(use.builddir)
.   endif
    CCACHE_BASEDIR=${PWD}
    export CCACHE_BASEDIR
    if [ -e autogen.sh ]; then
        $CI_TIME ./autogen.sh 2> /dev/null
    fi
    if [ -e buildconf ]; then
        $CI_TIME ./buildconf 2> /dev/null
    fi
    if [ ! -e autogen.sh ] && [ ! -e buildconf ] && [ ! -e ./configure ] && [ -s ./configure.ac ]; then
        $CI_TIME libtoolize --copy --force && \\
        $CI_TIME aclocal -I . && \\
        $CI_TIME autoheader && \\
        $CI_TIME automake --add-missing --copy && \\
        $CI_TIME autoconf || \\
        $CI_TIME autoreconf -fiv
    fi
.   if count(use.add_config_opts) > 0
    ( # Custom additional options for $(use.project)
.       for use.add_config_opts as add_cfgopt
      CONFIG_OPTS+=("$(add_cfgopt)")
.       endfor
      $CI_TIME ./configure "${CONFIG_OPTS[@]}"
    )
.   else
    $CI_TIME ./configure "${CONFIG_OPTS[@]}"
.   endif
    $CI_TIME make -j4
    $CI_TIME make install
    cd "${BASE_PWD}"
fi
.endfor
.for use where defined (use.repository) & ! defined (use.tarball)
.   if defined (use.debian_name)
if ! ((command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.debian_name) >/dev/null 2>&1) || \\
.   elsif defined (use.libname)
if ! ((command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.libname)-dev >/dev/null 2>&1) || \\
.   else
if ! ((command -v dpkg-query >/dev/null 2>&1 && dpkg-query --list $(use.project)-dev >/dev/null 2>&1) || \\
.   endif
       (command -v brew >/dev/null 2>&1 && brew ls --versions $(use.project) >/dev/null 2>&1)); then
.   if defined (use.release)
    $CI_TIME git clone --quiet --depth 1 -b $(use.release:) $(use.repository) $(use.project)
.   else
    $CI_TIME git clone --quiet --depth 1 $(use.repository) $(use.project)
.   endif
    BASE_PWD=${PWD}
.   if defined (use.builddir)
    cd $(use.project)/$(use.builddir)
.   else
    cd $(use.project)
.   endif
    CCACHE_BASEDIR=${PWD}
    export CCACHE_BASEDIR
    git --no-pager log --oneline -n1
    if [ -e autogen.sh ]; then
        $CI_TIME ./autogen.sh 2> /dev/null
    fi
    if [ -e buildconf ]; then
        $CI_TIME ./buildconf 2> /dev/null
    fi
    if [ ! -e autogen.sh ] && [ ! -e buildconf ] && [ ! -e ./configure ] && [ -s ./configure.ac ]; then
        $CI_TIME libtoolize --copy --force && \\
        $CI_TIME aclocal -I . && \\
        $CI_TIME autoheader && \\
        $CI_TIME automake --add-missing --copy && \\
        $CI_TIME autoconf || \\
        $CI_TIME autoreconf -fiv
    fi
.   if count(use.add_config_opts) > 0
    ( # Custom additional options for $(use.project)
.       for use.add_config_opts as add_cfgopt
      CONFIG_OPTS+=("$(add_cfgopt)")
.       endfor
      $CI_TIME ./configure "${CONFIG_OPTS[@]}"
    )
.   else
    $CI_TIME ./configure "${CONFIG_OPTS[@]}"
.   endif
    $CI_TIME make -j4
    $CI_TIME make install
    cd "${BASE_PWD}"
fi
.endfor

# Build and check this project
cd ../..
[ -z "$CI_TIME" ] || echo "`date`: Starting build of currently tested project..."
.if count(add_config_opts) > 0
# Custom additional options for this project
.   for add_config_opts as add_cfgopt
CONFIG_OPTS+=("$(add_cfgopt)")
.   endfor
.endif
CCACHE_BASEDIR=${PWD}
export CCACHE_BASEDIR
if [ "$DO_CLANG_FORMAT_CHECK" -eq "1" ] ; then
    PKG_CONFIG_PATH=${BUILD_PREFIX}/lib/pkgconfig $CI_TIME cmake "${CMAKE_OPTS[@]}" . \\
    && make clang-format-check || { make clang-format-diff && exit 1 ; }
else
    PKG_CONFIG_PATH=${BUILD_PREFIX}/lib/pkgconfig $CI_TIME cmake "${CMAKE_OPTS[@]}" .
    $CI_TIME make all VERBOSE=1 -j4
    $CI_TIME ctest -V
    $CI_TIME make install
fi
[ -z "$CI_TIME" ] || echo "`date`: Builds completed without fatal errors!"

echo "=== Are GitIgnores good after making the project '$BUILD_TYPE'? (should have no output below)"
git status -s || true
echo "==="
.close
.chmod_x ("builds/cmake/ci_build.sh")
.directory.create ('builds/cmake/Modules')
.output "builds/cmake/Modules/ClangFormat.cmake"
# additional target to perform clang-format run, requires clang-format

# get all project files
file(GLOB_RECURSE ALL_SOURCE_FILES
     RELATIVE ${CMAKE_CURRENT_BINARY_DIR}
     ${CMAKE_SOURCE_DIR}/src/*.c ${CMAKE_SOURCE_DIR}/src/*.cc ${CMAKE_SOURCE_DIR}/src/*.cpp
     ${CMAKE_SOURCE_DIR}/src/*.h ${CMAKE_SOURCE_DIR}/src/*.hpp
     ${CMAKE_SOURCE_DIR}/tests/*.c ${CMAKE_SOURCE_DIR}/tests/*.cc ${CMAKE_SOURCE_DIR}/tests/*.cpp
     ${CMAKE_SOURCE_DIR}/tests/*.h ${CMAKE_SOURCE_DIR}/tests/*.hpp
     ${CMAKE_SOURCE_DIR}/perf/*.c ${CMAKE_SOURCE_DIR}/perf/*.cc ${CMAKE_SOURCE_DIR}/perf/*.cpp
     ${CMAKE_SOURCE_DIR}/perf/*.h ${CMAKE_SOURCE_DIR}/perf/*.hpp
     ${CMAKE_SOURCE_DIR}/tools/*.c ${CMAKE_SOURCE_DIR}/tools/*.cc ${CMAKE_SOURCE_DIR}/tools/*.cpp
     ${CMAKE_SOURCE_DIR}/tools/*.h ${CMAKE_SOURCE_DIR}/tools/*.hpp
     ${CMAKE_SOURCE_DIR}/include/*.h
    )

if("${CLANG_FORMAT}" STREQUAL "")
  set(CLANG_FORMAT "clang-format")
endif()

add_custom_target(
        clang-format
        COMMAND ${CLANG_FORMAT} -style=file -i ${ALL_SOURCE_FILES}
)

function(JOIN VALUES GLUE OUTPUT)
  string (REPLACE ";" "${GLUE}" _TMP_STR "${VALUES}")
  set (${OUTPUT} "${_TMP_STR}" PARENT_SCOPE)
endfunction()

configure_file(builds/cmake/clang-format-check.sh.in clang-format-check.sh @ONLY)

add_custom_target(
        clang-format-check
        COMMAND chmod +x clang-format-check.sh
        COMMAND ./clang-format-check.sh
        COMMENT "Checking correct formatting according to .clang-format file using ${CLANG_FORMAT}"
)

add_custom_target(
        clang-format-diff
        COMMAND ${CLANG_FORMAT} -style=file -i ${ALL_SOURCE_FILES}
        COMMAND git diff ${ALL_SOURCE_FILES}
        COMMENT "Formatting with clang-format (using ${CLANG_FORMAT}) and showing differences with latest commit"
)
.close
.output "builds/cmake/clang-format-check.sh.in"
#!/bin/sh

# Use clang-format tool to verify this codebase conforms to our style standards

FAILED=0
IFS=";"
FILES="@ALL_SOURCE_FILES@"
IDS=\$\(echo -en "\\n\\b")
for FILE in $FILES
do
    @CLANG_FORMAT@ -style=file -output-replacements-xml "$FILE" | grep "<replacement " >/dev/null && \\
    {
      echo "$FILE is not correctly formatted" >&2
      FAILED=1
    }
done
if [ "$FAILED" -eq "1" ] ; then exit 1 ; fi
.close
.endmacro
