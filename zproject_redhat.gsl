#   Generate spec file for project
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("redhat", "packaging for RedHat")

.macro target_redhat
.for project.main where ( defined(main.service) & main.service > 0 )
.   systemd = 1
.endfor
.for project.target where ( target.name = "*" | target.name = "python_cffi" > 0 )
.   python_cffi = 1
.endfor
.directory.create ('packaging/redhat')
.output "packaging/redhat/$(project.name).spec"
#
#    $(project.name) - $(project.description?'':)
#
.   for project.license
#    $(string.trim (license.):block                                         )
.   endfor
#

# To build with draft APIs, use "--with drafts" in rpmbuild for local builds or add
#   Macros:
#   %_with_drafts 1
# at the BOTTOM of the OBS prjconf
%bcond_with drafts
%if %{with drafts}
%define DRAFTS yes
%else
%define DRAFTS no
%endif
.   if !has_main & !project.exports_classes
%global debug_package %{nil}
.   endif
.if systemd ?= 1
%define SYSTEMD_UNIT_DIR %(pkg-config --variable=systemdsystemunitdir systemd)
.endif
.if python_cffi ?= 1

# build with python_cffi support enabled
%bcond_with python_cffi
%if %{with python_cffi}
%define py2_ver %(python2 -c "import sys; print ('%d.%d' % (sys.version_info.major, sys.version_info.minor))")
%endif

# build with python3_cffi support enabled
%bcond_with python3_cffi
%if %{with python3_cffi}
%define py3_ver %(python3 -c "import sys; print ('%d.%d' % (sys.version_info.major, sys.version_info.minor))")
%endif

.endif
Name:           $(project.name)
Version:        $(project->version.major).$(project->version.minor).$(project->version.patch)
Release:        1
Summary:        $(project.description)
License:        $(project.license?"MIT")
URL:            $(project.url?"http://example.com/")
Source0:        %{name}-%{version}.tar.gz
Group:          System/Libraries
# Note: ghostscript is required by graphviz which is required by
#       asciidoc. On Fedora 24 the ghostscript dependencies cannot
#       be resolved automatically. Thus add working dependency here!
BuildRequires:  ghostscript
BuildRequires:  asciidoc
BuildRequires:  automake
BuildRequires:  autoconf
BuildRequires:  libtool
BuildRequires:  pkgconfig
.if systemd ?= 1
BuildRequires:  systemd-devel
BuildRequires:  systemd
%{?systemd_requires}
.endif
BuildRequires:  xmlto
.if project.use_cxx
BuildRequires:  gcc-c++
.endif
.for project.use
.if defined(use.redhat_name)
.   if !(use.redhat_name = '')
BuildRequires:  $(use.redhat_name)
.   else
.       echo "WARNING: redhat_name=='' for $(use.project) - not added to packaging/redhat/$(project.name).spec"
.   endif
.else
BuildRequires:  $(use.project)-devel
.endif
.endfor
.if python_cffi ?= 1
%if %{with python_cffi}
BuildRequires:  python-cffi
BuildRequires:  python-devel
BuildRequires:  python-setuptools
%endif
%if %{with python3_cffi}
BuildRequires:  python3-devel
BuildRequires:  python3-cffi
BuildRequires:  python3-setuptools
%endif
.endif
BuildRoot:      %{_tmppath}/%{name}-%{version}-build
.if project.has_main | count(project.bin) > 0
Requires: $(project.libname)$(my.abi_ver) = %{version}-%{release}
.for project.use where use.type ?= "runtime"
.if defined(use.redhat_name)
.   if !(use.redhat_name = '')
Requires: $(use.redhat_name)
.   else
.       echo "WARNING: redhat_name=='' for $(use.project) - not added to packaging/redhat/$(project.name).spec"
.   endif
.elsif regexp.match("^lib", use.libname)
Requires: $(string.replace (use.libname, "_|-"))
.else
Requires: $(string.replace (use.project, "_|-"))
.endif
.endfor
.endif

%description
$(project.name) $(project.description).

.if defined (project->abi)
.   my.abi_ver = project->abi.current - project->abi.age
.else
.   my.abi_ver = 0
.endif
.if project.exports_classes
%package -n $(project.libname)$(my.abi_ver)
Group:          System/Libraries
Summary:        $(project.description) shared library

%description -n $(project.libname)$(my.abi_ver)
This package contains shared library for $(project.name): $(project.description)

%post -n $(project.libname)$(my.abi_ver) -p /sbin/ldconfig
%postun -n $(project.libname)$(my.abi_ver) -p /sbin/ldconfig

%files -n $(project.libname)$(my.abi_ver)
%defattr(-,root,root)
.if file.exists ('COPYING')
%doc COPYING
.endif
%{_libdir}/$(project.libname).so.*

%package devel
Summary:        $(project.description)
Group:          System/Libraries
Requires:       $(project.libname)$(my.abi_ver) = %{version}-%{release}
.for project.use
.if defined(use.redhat_name)
.   if !(use.redhat_name = '')
Requires:       $(use.redhat_name)
.   else
.       echo "WARNING: redhat_name=='' for $(use.project) - not added to packaging/redhat/$(project.name).spec"
.   endif
.else
Requires:       $(use.project)-devel
.endif
.endfor

%description devel
$(project.description) development tools
This package contains development files for $(project.name): $(project.description)

%files devel
%defattr(-,root,root)
%{_includedir}/*
%{_libdir}/$(project.libname).so
%{_libdir}/pkgconfig/$(project.libname).pc
.   discover_manpages(project)
.   if man3 ?<> ""
%{_mandir}/man3/*
.   endif
.   if man7 ?<> ""
%{_mandir}/man7/*
.   endif
.   for class where defined (class.api)
.       if first ()
# Install api files into /usr/local/share/zproject
%dir %{_datadir}/zproject/
%dir %{_datadir}/zproject/$(project.name)
%{_datadir}/zproject/$(project.name)/*
.      endif
.   endfor
.endif
.if python_cffi ?= 1

%if %{with python_cffi}
%package -n python2-$(project.name)-cffi
Group: Python
Summary: Python CFFI bindings for $(project.name)
Requires: python >= %{py2_ver}.0, python < 3.0.0

%description -n python2-$(project.name)-cffi
This package contains Python CFFI bindings for $(project.name)

%files -n python2-$(project.name)-cffi
%{_libdir}/python%{py2_ver}/site-packages/$(project.name:c)_cffi/
%{_libdir}/python%{py2_ver}/site-packages/$(project.name:c)_cffi-*-py%{py2_ver}.egg-info/
%endif

%if %{with python3_cffi}
%package -n python3-$(project.name)-cffi
Group: Python
Summary: Python 3 CFFI bindings for $(project.name)
Requires: python = %{py3_ver}

%description -n python3-$(project.name)-cffi
This package contains Python 3 CFFI bindings for $(project.name)

%files -n python3-$(project.name)-cffi
%{_libdir}/python%{py3_ver}/site-packages/$(project.name:c)_cffi/
%{_libdir}/python%{py3_ver}/site-packages/$(project.name:c)_cffi-*-py%{py3_ver}.egg-info/
%endif
.endif

%prep
.if python_cffi ?= 1
#FIXME: error:... did not worked for me
%if %{with python_cffi}
%if %{without drafts}
echo "FATAL: python_cffi not yet supported w/o drafts"
exit 1
%endif
%endif
.endif

%setup -q

%build
sh autogen.sh
%{configure} --enable-drafts=%{DRAFTS}\
.if systemd ?= 1
 --with-systemd-units\
.endif
.for project.use where use.optional
 --with-$(use.libname)=yes\
.endfor

make %{_smp_mflags}
.if python_cffi ?= 1
%if %{with python_cffi}
# Problem: we need pkg-config points to built and not yet installed copy of $(project.name)
# Solution: chicken-egg problem - let's make "fake" pkg-config file
sed -e "s@^libdir.*@libdir=.libs/@" \\
    -e "s@^includedir.*@includedir=include/@" \\
    src/$(project.libname).pc > bindings/python_cffi/$(project.libname).pc
cd bindings/python_cffi
# This avoids problem with "weird" character quoting between shell and python3
ln -sfr ../../include/ .
ln -sfr ../../src/.libs/ .
export PKG_CONFIG_PATH=`pwd`
python2 setup.py build
%endif

%if %{with python3_cffi}
# Problem: we need pkg-config points to built and not yet installed copy of $(project.name)
# Solution: chicken-egg problem - let's make "fake" pkg-config file
sed -e "s@^libdir.*@libdir=.libs/@" \\
    -e "s@^includedir.*@includedir=include/@" \\
    src/$(project.libname).pc > bindings/python_cffi/$(project.libname).pc
cd bindings/python_cffi
# This avoids problem with "weird" character quoting between shell and python3
ln -sfr ../../include/ .
ln -sfr ../../src/.libs/ .
export PKG_CONFIG_PATH=`pwd`
python3 setup.py build
%endif
.endif

%install
make install DESTDIR=%{buildroot} %{?_smp_mflags}

# remove static libraries
find %{buildroot} -name '*.a' | xargs rm -f
find %{buildroot} -name '*.la' | xargs rm -f

.if python_cffi ?= 1
%if %{with python_cffi}
cd bindings/python_cffi
export PKG_CONFIG_PATH=`pwd`
python2 setup.py install --root=%{buildroot} --skip-build --prefix %{_prefix}
%endif

%if %{with python3_cffi}
cd bindings/python_cffi
export PKG_CONFIG_PATH=`pwd`
python3 setup.py install --root=%{buildroot} --skip-build --prefix %{_prefix}
%endif
.endif
.if has_main | count(project.bin) > 0
%files
%defattr(-,root,root)
.if file.exists ('README.md')
%doc README.md
.endif
.if file.exists ('README.txt')
%doc README.txt
.endif
.if file.exists ('README.asciidoc')
%doc README.asciidoc
.endif
.if file.exists ('COPYING')
%doc COPYING
.endif
.# generate binary names
.for project.main where scope = "public"
%{_bindir}/$(main.name)
.   if man1 ?<> ""
%{_mandir}/man1/$(main.name)*
.   endif
.endfor
.for project.bin
%{_bindir}/$(bin.name)
.endfor
.# generate service file names
.for project.main where ( defined(main.service) & main.service > 0 )
.       if !defined(main.no_config) | main.no_config ?= 0
%config(noreplace) %{_sysconfdir}/$(project.name)/$(main.name).cfg
.       endif
.       if file.exists("src/$(main.name).service") | file.exists("src/$(main.name).service.in") | ( main.service ?= 1 | main.service ?= 3 )
%{SYSTEMD_UNIT_DIR}/$(main.name).service
.       endif
.       if file.exists("src/$(main.name)@.service") | file.exists("src/$(main.name)@.service.in") | ( main.service ?= 2 | main.service ?= 3 )
%{SYSTEMD_UNIT_DIR}/$(main.name)@.service
.       endif
.etc_exists = 1
.endfor
.for project.main where ( defined(main.timer) & main.timer > 0 )
.       if file.exists("src/$(main.name).timer") | file.exists("src/$(main.name).timer.in") | ( main.timer ?= 1 | main.timer ?= 3 )
%{SYSTEMD_UNIT_DIR}/$(main.name).timer
.       endif
.       if file.exists("src/$(main.name)@.timer") | file.exists("src/$(main.name)@.timer.in") | ( main.timer ?= 2 | main.timer ?= 3 )
%{SYSTEMD_UNIT_DIR}/$(main.name)@.timer
.       endif
.endfor
.for project.bin where ( defined(bin.service) & bin.service > 0 )
.       if file.exists("src/$(bin.name).service") | file.exists("src/$(bin.name).service.in") | ( bin.service ?= 1 | bin.service ?= 3 )
%{SYSTEMD_UNIT_DIR}/$(bin.name).service
.       endif
.       if file.exists("src/$(bin.name)@.service") | file.exists("src/$(bin.name)@.service.in") | ( bin.service ?= 2 | bin.service ?= 3 )
%{SYSTEMD_UNIT_DIR}/$(bin.name)@.service
.       endif
.endfor
.for project.bin where ( defined(bin.timer) & bin.timer > 0 )
.       if file.exists("src/$(bin.name).timer") | file.exists("src/$(bin.name).timer.in") | ( bin.timer ?= 1 | bin.timer ?= 3 )
%{SYSTEMD_UNIT_DIR}/$(bin.name).timer
.       endif
.       if file.exists("src/$(bin.name)@.timer") | file.exists("src/$(bin.name)@.timer.in") | ( bin.timer ?= 2 | bin.timer ?= 3 )
%{SYSTEMD_UNIT_DIR}/$(bin.name)@.timer
.       endif
.endfor
.if etc_exists ?= 1
%dir %{_sysconfdir}/$(project.name)
.endif
.insert_snippet ("redhat.spec")
.if systemd ?= 1
%if 0%{?suse_version} > 1315
%post
%systemd_post\
.   for project.main where ( defined(main.service) & main.service > 0 )
.       if file.exists("src/$(main.name).service") | file.exists("src/$(main.name).service.in") | ( main.service ?= 1 | main.service ?= 3 )
 $(main.name).service\
.       endif
.       if file.exists("src/$(main.name)@.service") | file.exists("src/$(main.name)@.service.in") | ( main.service ?= 2 | main.service ?= 3 )
 $(main.name)@.service\
.       endif
.   endfor
.   for project.main where ( defined(main.timer) & main.timer > 0 )
.       if file.exists("src/$(main.name).timer") | file.exists("src/$(main.name).timer.in") | ( main.timer ?= 1 | main.timer ?= 3 )
 $(main.name).timer\
.       endif
.       if file.exists("src/$(main.name)@.timer") | file.exists("src/$(main.name)@.timer.in") | ( main.timer ?= 2 | main.timer ?= 3 )
 $(main.name)@.timer\
.       endif
.   endfor
.   for project.bin where ( defined(bin.service) & bin.service > 0 )
.       if file.exists("src/$(bin.name).service") | file.exists("src/$(bin.name).service.in") | ( bin.service ?= 1 | bin.service ?= 3 )
 $(bin.name).service\
.       endif
.       if file.exists("src/$(bin.name)@.service") | file.exists("src/$(bin.name)@.service.in") | ( bin.service ?= 2 | bin.service ?= 3 )
 $(bin.name)@.service\
.       endif
.   endfor
.   for project.bin where ( defined(bin.timer) & bin.timer > 0 )
.       if file.exists("src/$(bin.name).timer") | file.exists("src/$(bin.name).timer.in") | ( bin.timer ?= 1 | bin.timer ?= 3 )
 $(bin.name).timer\
.       endif
.       if file.exists("src/$(bin.name)@.timer") | file.exists("src/$(bin.name)@.timer.in") | ( bin.timer ?= 2 | bin.timer ?= 3 )
 $(bin.name)@.timer\
.       endif
.   endfor

%preun
%systemd_preun\
.   for project.main where ( defined(main.service) & main.service > 0 )
.       if file.exists("src/$(main.name).service") | file.exists("src/$(main.name).service.in") | ( main.service ?= 1 | main.service ?= 3 )
 $(main.name).service\
.       endif
.       if file.exists("src/$(main.name)@.service") | file.exists("src/$(main.name)@.service.in") | ( main.service ?= 2 | main.service ?= 3 )
 $(main.name)@.service\
.       endif
.   endfor
.   for project.main where ( defined(main.timer) & main.timer > 0 )
.       if file.exists("src/$(main.name).timer") | file.exists("src/$(main.name).timer.in") | ( main.timer ?= 1 | main.timer ?= 3 )
 $(main.name).timer\
.       endif
.       if file.exists("src/$(main.name)@.timer") | file.exists("src/$(main.name)@.timer.in") | ( main.timer ?= 2 | main.timer ?= 3 )
 $(main.name)@.timer\
.       endif
.   endfor
.   for project.bin where ( defined(bin.service) & bin.service > 0 )
.       if file.exists("src/$(bin.name).service") | file.exists("src/$(bin.name).service.in") | ( bin.service ?= 1 | bin.service ?= 3 )
 $(bin.name).service\
.       endif
.       if file.exists("src/$(bin.name)@.service") | file.exists("src/$(bin.name)@.service.in") | ( bin.service ?= 2 | bin.service ?= 3 )
 $(bin.name)@.service\
.       endif
.   endfor
.   for project.bin where ( defined(bin.timer) & bin.timer > 0 )
.       if file.exists("src/$(bin.name).timer") | file.exists("src/$(bin.name).timer.in") | ( bin.timer ?= 1 | bin.timer ?= 3 )
 $(bin.name).timer\
.       endif
.       if file.exists("src/$(bin.name)@.timer") | file.exists("src/$(bin.name)@.timer.in") | ( bin.timer ?= 2 | bin.timer ?= 3 )
 $(bin.name)@.timer\
.       endif
.   endfor

%postun
%systemd_postun_with_restart\
.   for project.main where ( defined(main.service) & main.service > 0 )
.       if file.exists("src/$(main.name).service") | file.exists("src/$(main.name).service.in") | ( main.service ?= 1 | main.service ?= 3 )
 $(main.name).service\
.       endif
.       if file.exists("src/$(main.name)@.service") | file.exists("src/$(main.name)@.service.in") | ( main.service ?= 2 | main.service ?= 3 )
 $(main.name)@.service\
.       endif
.   endfor
.   for project.main where ( defined(main.timer) & main.timer > 0 )
.       if file.exists("src/$(main.name).timer") | file.exists("src/$(main.name).timer.in") | ( main.timer ?= 1 | main.timer ?= 3 )
 $(main.name).timer\
.       endif
.       if file.exists("src/$(main.name)@.timer") | file.exists("src/$(main.name)@.timer.in") | ( main.timer ?= 2 | main.timer ?= 3 )
 $(main.name)@.timer\
.       endif
.   endfor
.   for project.bin where ( defined(bin.service) & bin.service > 0 )
.       if file.exists("src/$(bin.name).service") | file.exists("src/$(bin.name).service.in") | ( bin.service ?= 1 | bin.service ?= 3 )
 $(bin.name).service\
.       endif
.       if file.exists("src/$(bin.name)@.service") | file.exists("src/$(bin.name)@.service.in") | ( bin.service ?= 2 | bin.service ?= 3 )
 $(bin.name)@.service\
.       endif
.   endfor
.   for project.bin where ( defined(bin.timer) & bin.timer > 0 )
.       if file.exists("src/$(bin.name).timer") | file.exists("src/$(bin.name).timer.in") | ( bin.timer ?= 1 | bin.timer ?= 3 )
 $(bin.name).timer\
.       endif
.       if file.exists("src/$(bin.name)@.timer") | file.exists("src/$(bin.name)@.timer.in") | ( bin.timer ?= 2 | bin.timer ?= 3 )
 $(bin.name)@.timer\
.       endif
.   endfor

%endif
.endif
.endif

%changelog
.endmacro
